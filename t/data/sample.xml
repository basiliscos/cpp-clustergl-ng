<?xml version="1.0"?>
<cscan>
  <typedef_hash>
    <typedef id="UnusedType" before="unsigned int" after="" file="/usr/include/GL/gl.h"/>
    <typedef id="GLenum" before="unsigned int" after="" file="/usr/include/GL/gl.h"/>
    <typedef id="GLint" before="int" after="" file="/usr/include/GL/gl.h"/>
    <typedef id="GLsizei" before="int" after="" file="/usr/include/GL/gl.h"/>
    <typedef id="GLvoid" before="void" after="" file="/usr/include/GL/gl.h"/>
  </typedef_hash>
  <fdecls>
    <fdecl id="glTexImage2D" text="void glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )" file="/usr/include/GL/gl.h"/>
    <fdecl id="glPopAttrib" text="void glPopAttrib( void )" file="/usr/include/GL/gl.h"/>
    <fdecl id="glGetString" text="const GLubyte * glGetString( GLenum name )" file="/usr/include/GL/gl.h"/>
  </fdecls>
  <ast>
    <translationUnit isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="288980" text="typedef unsigned int GLenum;&#10;typedef unsigned char GLboolean;&#10;typedef unsigned int GLbitfield;&#10;typedef void GLvoid;&#10;typedef signed char GLbyte;&#10;typedef short GLshort;&#10;typedef int GLint;&#10;typedef unsigned char GLubyte;&#10;typedef unsigned short GLushort;&#10;typedef unsigned int GLuint;&#10;typedef int GLsizei;&#10;typedef float GLfloat;&#10;typedef float GLclampf;&#10;typedef double GLdouble;&#10;typedef double GLclampd;&#10;# 748 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glClearIndex( GLfloat c );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClearColor( GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClear( GLbitfield mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexMask( GLuint mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorMask( GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glAlphaFunc( GLenum func, GLclampf ref );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBlendFunc( GLenum sfactor, GLenum dfactor );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLogicOp( GLenum opcode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCullFace( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFrontFace( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPointSize( GLfloat size );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLineWidth( GLfloat width );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLineStipple( GLint factor, GLushort pattern );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPolygonMode( GLenum face, GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPolygonOffset( GLfloat factor, GLfloat units );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPolygonStipple( const GLubyte *mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetPolygonStipple( GLubyte *mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEdgeFlag( GLboolean flag );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEdgeFlagv( const GLboolean *flag );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glScissor( GLint x, GLint y, GLsizei width, GLsizei height);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClipPlane( GLenum plane, const GLdouble *equation );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetClipPlane( GLenum plane, GLdouble *equation );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDrawBuffer( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glReadBuffer( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEnable( GLenum cap );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDisable( GLenum cap );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLboolean glIsEnabled( GLenum cap );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEnableClientState( GLenum cap );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDisableClientState( GLenum cap );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetBooleanv( GLenum pname, GLboolean *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetDoublev( GLenum pname, GLdouble *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetFloatv( GLenum pname, GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetIntegerv( GLenum pname, GLint *params );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPushAttrib( GLbitfield mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPopAttrib( void );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPushClientAttrib( GLbitfield mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPopClientAttrib( void );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLint glRenderMode( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLenum glGetError( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) const GLubyte * glGetString( GLenum name );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFinish( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFlush( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glHint( GLenum target, GLenum mode );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClearDepth( GLclampd depth );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDepthFunc( GLenum func );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDepthMask( GLboolean flag );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDepthRange( GLclampd near_val, GLclampd far_val );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClearAccum( GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glAccum( GLenum op, GLfloat value );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMatrixMode( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glOrtho( GLdouble left, GLdouble right,&#10;                                 GLdouble bottom, GLdouble top,&#10;                                 GLdouble near_val, GLdouble far_val );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFrustum( GLdouble left, GLdouble right,&#10;                                   GLdouble bottom, GLdouble top,&#10;                                   GLdouble near_val, GLdouble far_val );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glViewport( GLint x, GLint y,&#10;                                    GLsizei width, GLsizei height );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPushMatrix( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPopMatrix( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadIdentity( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadMatrixd( const GLdouble *m );&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadMatrixf( const GLfloat *m );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultMatrixd( const GLdouble *m );&#10;__attribute__((visibility(&quot;default&quot;))) void glMultMatrixf( const GLfloat *m );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRotated( GLdouble angle,&#10;                                   GLdouble x, GLdouble y, GLdouble z );&#10;__attribute__((visibility(&quot;default&quot;))) void glRotatef( GLfloat angle,&#10;                                   GLfloat x, GLfloat y, GLfloat z );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glScaled( GLdouble x, GLdouble y, GLdouble z );&#10;__attribute__((visibility(&quot;default&quot;))) void glScalef( GLfloat x, GLfloat y, GLfloat z );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTranslated( GLdouble x, GLdouble y, GLdouble z );&#10;__attribute__((visibility(&quot;default&quot;))) void glTranslatef( GLfloat x, GLfloat y, GLfloat z );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLboolean glIsList( GLuint list );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDeleteLists( GLuint list, GLsizei range );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLuint glGenLists( GLsizei range );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glNewList( GLuint list, GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEndList( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCallList( GLuint list );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCallLists( GLsizei n, GLenum type,&#10;                                     const GLvoid *lists );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glListBase( GLuint base );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBegin( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEnd( void );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2d( GLdouble x, GLdouble y );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2f( GLfloat x, GLfloat y );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2i( GLint x, GLint y );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2s( GLshort x, GLshort y );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3d( GLdouble x, GLdouble y, GLdouble z );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3f( GLfloat x, GLfloat y, GLfloat z );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3i( GLint x, GLint y, GLint z );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3s( GLshort x, GLshort y, GLshort z );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4i( GLint x, GLint y, GLint z, GLint w );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4s( GLshort x, GLshort y, GLshort z, GLshort w );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex2sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex3sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glVertex4sv( const GLshort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3b( GLbyte nx, GLbyte ny, GLbyte nz );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3d( GLdouble nx, GLdouble ny, GLdouble nz );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3f( GLfloat nx, GLfloat ny, GLfloat nz );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3i( GLint nx, GLint ny, GLint nz );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3s( GLshort nx, GLshort ny, GLshort nz );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3bv( const GLbyte *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glNormal3sv( const GLshort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexd( GLdouble c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexf( GLfloat c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexi( GLint c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexs( GLshort c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexub( GLubyte c );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexdv( const GLdouble *c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexfv( const GLfloat *c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexiv( const GLint *c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexsv( const GLshort *c );&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexubv( const GLubyte *c );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3b( GLbyte red, GLbyte green, GLbyte blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3d( GLdouble red, GLdouble green, GLdouble blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3f( GLfloat red, GLfloat green, GLfloat blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3i( GLint red, GLint green, GLint blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3s( GLshort red, GLshort green, GLshort blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3ub( GLubyte red, GLubyte green, GLubyte blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3ui( GLuint red, GLuint green, GLuint blue );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3us( GLushort red, GLushort green, GLushort blue );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4b( GLbyte red, GLbyte green,&#10;                                   GLbyte blue, GLbyte alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4d( GLdouble red, GLdouble green,&#10;                                   GLdouble blue, GLdouble alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4f( GLfloat red, GLfloat green,&#10;                                   GLfloat blue, GLfloat alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4i( GLint red, GLint green,&#10;                                   GLint blue, GLint alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4s( GLshort red, GLshort green,&#10;                                   GLshort blue, GLshort alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4ub( GLubyte red, GLubyte green,&#10;                                    GLubyte blue, GLubyte alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4ui( GLuint red, GLuint green,&#10;                                    GLuint blue, GLuint alpha );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4us( GLushort red, GLushort green,&#10;                                    GLushort blue, GLushort alpha );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3bv( const GLbyte *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3sv( const GLshort *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3ubv( const GLubyte *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3uiv( const GLuint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor3usv( const GLushort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4bv( const GLbyte *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4sv( const GLshort *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4ubv( const GLubyte *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4uiv( const GLuint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glColor4usv( const GLushort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1d( GLdouble s );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1f( GLfloat s );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1i( GLint s );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1s( GLshort s );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2d( GLdouble s, GLdouble t );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2f( GLfloat s, GLfloat t );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2i( GLint s, GLint t );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2s( GLshort s, GLshort t );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3d( GLdouble s, GLdouble t, GLdouble r );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3f( GLfloat s, GLfloat t, GLfloat r );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3i( GLint s, GLint t, GLint r );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3s( GLshort s, GLshort t, GLshort r );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4d( GLdouble s, GLdouble t, GLdouble r, GLdouble q );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4f( GLfloat s, GLfloat t, GLfloat r, GLfloat q );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4i( GLint s, GLint t, GLint r, GLint q );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4s( GLshort s, GLshort t, GLshort r, GLshort q );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord1sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord2sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord3sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoord4sv( const GLshort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2d( GLdouble x, GLdouble y );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2f( GLfloat x, GLfloat y );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2i( GLint x, GLint y );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2s( GLshort x, GLshort y );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3d( GLdouble x, GLdouble y, GLdouble z );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3f( GLfloat x, GLfloat y, GLfloat z );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3i( GLint x, GLint y, GLint z );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3s( GLshort x, GLshort y, GLshort z );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4d( GLdouble x, GLdouble y, GLdouble z, GLdouble w );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4f( GLfloat x, GLfloat y, GLfloat z, GLfloat w );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4i( GLint x, GLint y, GLint z, GLint w );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4s( GLshort x, GLshort y, GLshort z, GLshort w );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos2sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos3sv( const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4dv( const GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4fv( const GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4iv( const GLint *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glRasterPos4sv( const GLshort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRectd( GLdouble x1, GLdouble y1, GLdouble x2, GLdouble y2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRectf( GLfloat x1, GLfloat y1, GLfloat x2, GLfloat y2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRecti( GLint x1, GLint y1, GLint x2, GLint y2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRects( GLshort x1, GLshort y1, GLshort x2, GLshort y2 );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glRectdv( const GLdouble *v1, const GLdouble *v2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRectfv( const GLfloat *v1, const GLfloat *v2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRectiv( const GLint *v1, const GLint *v2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glRectsv( const GLshort *v1, const GLshort *v2 );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glVertexPointer( GLint size, GLenum type,&#10;                                       GLsizei stride, const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glNormalPointer( GLenum type, GLsizei stride,&#10;                                       const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorPointer( GLint size, GLenum type,&#10;                                      GLsizei stride, const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glIndexPointer( GLenum type, GLsizei stride,&#10;                                      const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexCoordPointer( GLint size, GLenum type,&#10;                                         GLsizei stride, const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEdgeFlagPointer( GLsizei stride, const GLvoid *ptr );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetPointerv( GLenum pname, GLvoid **params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glArrayElement( GLint i );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDrawArrays( GLenum mode, GLint first, GLsizei count );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDrawElements( GLenum mode, GLsizei count,&#10;                                      GLenum type, const GLvoid *indices );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glInterleavedArrays( GLenum format, GLsizei stride,&#10;                                           const GLvoid *pointer );&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glShadeModel( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLightf( GLenum light, GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glLighti( GLenum light, GLenum pname, GLint param );&#10;__attribute__((visibility(&quot;default&quot;))) void glLightfv( GLenum light, GLenum pname,&#10;                                 const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glLightiv( GLenum light, GLenum pname,&#10;                                 const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetLightfv( GLenum light, GLenum pname,&#10;                                    GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetLightiv( GLenum light, GLenum pname,&#10;                                    GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLightModelf( GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glLightModeli( GLenum pname, GLint param );&#10;__attribute__((visibility(&quot;default&quot;))) void glLightModelfv( GLenum pname, const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glLightModeliv( GLenum pname, const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMaterialf( GLenum face, GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glMateriali( GLenum face, GLenum pname, GLint param );&#10;__attribute__((visibility(&quot;default&quot;))) void glMaterialfv( GLenum face, GLenum pname, const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glMaterialiv( GLenum face, GLenum pname, const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMaterialfv( GLenum face, GLenum pname, GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMaterialiv( GLenum face, GLenum pname, GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorMaterial( GLenum face, GLenum mode );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelZoom( GLfloat xfactor, GLfloat yfactor );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelStoref( GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelStorei( GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelTransferf( GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelTransferi( GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelMapfv( GLenum map, GLsizei mapsize,&#10;                                    const GLfloat *values );&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelMapuiv( GLenum map, GLsizei mapsize,&#10;                                     const GLuint *values );&#10;__attribute__((visibility(&quot;default&quot;))) void glPixelMapusv( GLenum map, GLsizei mapsize,&#10;                                     const GLushort *values );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetPixelMapfv( GLenum map, GLfloat *values );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetPixelMapuiv( GLenum map, GLuint *values );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetPixelMapusv( GLenum map, GLushort *values );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBitmap( GLsizei width, GLsizei height,&#10;                                GLfloat xorig, GLfloat yorig,&#10;                                GLfloat xmove, GLfloat ymove,&#10;                                const GLubyte *bitmap );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glReadPixels( GLint x, GLint y,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLenum format, GLenum type,&#10;                                    GLvoid *pixels );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDrawPixels( GLsizei width, GLsizei height,&#10;                                    GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyPixels( GLint x, GLint y,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLenum type );&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glStencilFunc( GLenum func, GLint ref, GLuint mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glStencilMask( GLuint mask );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glStencilOp( GLenum fail, GLenum zfail, GLenum zpass );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClearStencil( GLint s );&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGend( GLenum coord, GLenum pname, GLdouble param );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGenf( GLenum coord, GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGeni( GLenum coord, GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGendv( GLenum coord, GLenum pname, const GLdouble *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGenfv( GLenum coord, GLenum pname, const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexGeniv( GLenum coord, GLenum pname, const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexGendv( GLenum coord, GLenum pname, GLdouble *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexGenfv( GLenum coord, GLenum pname, GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexGeniv( GLenum coord, GLenum pname, GLint *params );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexEnvf( GLenum target, GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexEnvi( GLenum target, GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexEnvfv( GLenum target, GLenum pname, const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexEnviv( GLenum target, GLenum pname, const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexEnvfv( GLenum target, GLenum pname, GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexEnviv( GLenum target, GLenum pname, GLint *params );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexParameterf( GLenum target, GLenum pname, GLfloat param );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexParameteri( GLenum target, GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexParameterfv( GLenum target, GLenum pname,&#10;                                          const GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glTexParameteriv( GLenum target, GLenum pname,&#10;                                          const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexParameterfv( GLenum target,&#10;                                           GLenum pname, GLfloat *params);&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexParameteriv( GLenum target,&#10;                                           GLenum pname, GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexLevelParameterfv( GLenum target, GLint level,&#10;                                                GLenum pname, GLfloat *params );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexLevelParameteriv( GLenum target, GLint level,&#10;                                                GLenum pname, GLint *params );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexImage1D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLint border,&#10;                                    GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetTexImage( GLenum target, GLint level,&#10;                                     GLenum format, GLenum type,&#10;                                     GLvoid *pixels );&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGenTextures( GLsizei n, GLuint *textures );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glDeleteTextures( GLsizei n, const GLuint *textures);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBindTexture( GLenum target, GLuint texture );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPrioritizeTextures( GLsizei n,&#10;                                            const GLuint *textures,&#10;                                            const GLclampf *priorities );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLboolean glAreTexturesResident( GLsizei n,&#10;                                                  const GLuint *textures,&#10;                                                  GLboolean *residences );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) GLboolean glIsTexture( GLuint texture );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexSubImage1D( GLenum target, GLint level,&#10;                                       GLint xoffset,&#10;                                       GLsizei width, GLenum format,&#10;                                       GLenum type, const GLvoid *pixels );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexSubImage2D( GLenum target, GLint level,&#10;                                       GLint xoffset, GLint yoffset,&#10;                                       GLsizei width, GLsizei height,&#10;                                       GLenum format, GLenum type,&#10;                                       const GLvoid *pixels );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyTexImage1D( GLenum target, GLint level,&#10;                                        GLenum internalformat,&#10;                                        GLint x, GLint y,&#10;                                        GLsizei width, GLint border );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyTexImage2D( GLenum target, GLint level,&#10;                                        GLenum internalformat,&#10;                                        GLint x, GLint y,&#10;                                        GLsizei width, GLsizei height,&#10;                                        GLint border );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyTexSubImage1D( GLenum target, GLint level,&#10;                                           GLint xoffset, GLint x, GLint y,&#10;                                           GLsizei width );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyTexSubImage2D( GLenum target, GLint level,&#10;                                           GLint xoffset, GLint yoffset,&#10;                                           GLint x, GLint y,&#10;                                           GLsizei width, GLsizei height );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMap1d( GLenum target, GLdouble u1, GLdouble u2,&#10;                               GLint stride,&#10;                               GLint order, const GLdouble *points );&#10;__attribute__((visibility(&quot;default&quot;))) void glMap1f( GLenum target, GLfloat u1, GLfloat u2,&#10;                               GLint stride,&#10;                               GLint order, const GLfloat *points );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMap2d( GLenum target,&#10;       GLdouble u1, GLdouble u2, GLint ustride, GLint uorder,&#10;       GLdouble v1, GLdouble v2, GLint vstride, GLint vorder,&#10;       const GLdouble *points );&#10;__attribute__((visibility(&quot;default&quot;))) void glMap2f( GLenum target,&#10;       GLfloat u1, GLfloat u2, GLint ustride, GLint uorder,&#10;       GLfloat v1, GLfloat v2, GLint vstride, GLint vorder,&#10;       const GLfloat *points );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMapdv( GLenum target, GLenum query, GLdouble *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMapfv( GLenum target, GLenum query, GLfloat *v );&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMapiv( GLenum target, GLenum query, GLint *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord1d( GLdouble u );&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord1f( GLfloat u );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord1dv( const GLdouble *u );&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord1fv( const GLfloat *u );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord2d( GLdouble u, GLdouble v );&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord2f( GLfloat u, GLfloat v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord2dv( const GLdouble *u );&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalCoord2fv( const GLfloat *u );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMapGrid1d( GLint un, GLdouble u1, GLdouble u2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glMapGrid1f( GLint un, GLfloat u1, GLfloat u2 );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMapGrid2d( GLint un, GLdouble u1, GLdouble u2,&#10;                                   GLint vn, GLdouble v1, GLdouble v2 );&#10;__attribute__((visibility(&quot;default&quot;))) void glMapGrid2f( GLint un, GLfloat u1, GLfloat u2,&#10;                                   GLint vn, GLfloat v1, GLfloat v2 );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalPoint1( GLint i );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalPoint2( GLint i, GLint j );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalMesh1( GLenum mode, GLint i1, GLint i2 );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glEvalMesh2( GLenum mode, GLint i1, GLint i2, GLint j1, GLint j2 );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFogf( GLenum pname, GLfloat param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFogi( GLenum pname, GLint param );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFogfv( GLenum pname, const GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFogiv( GLenum pname, const GLint *params );&#10;&#10;&#10;&#10;&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glFeedbackBuffer( GLsizei size, GLenum type, GLfloat *buffer );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPassThrough( GLfloat token );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glSelectBuffer( GLsizei size, GLuint *buffer );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glInitNames( void );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadName( GLuint name );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPushName( GLuint name );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glPopName( void );&#10;# 1493 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glDrawRangeElements( GLenum mode, GLuint start,&#10; GLuint end, GLsizei count, GLenum type, const GLvoid *indices );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexImage3D( GLenum target, GLint level,&#10;                                      GLint internalFormat,&#10;                                      GLsizei width, GLsizei height,&#10;                                      GLsizei depth, GLint border,&#10;                                      GLenum format, GLenum type,&#10;                                      const GLvoid *pixels );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glTexSubImage3D( GLenum target, GLint level,&#10;                                         GLint xoffset, GLint yoffset,&#10;                                         GLint zoffset, GLsizei width,&#10;                                         GLsizei height, GLsizei depth,&#10;                                         GLenum format,&#10;                                         GLenum type, const GLvoid *pixels);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyTexSubImage3D( GLenum target, GLint level,&#10;                                             GLint xoffset, GLint yoffset,&#10;                                             GLint zoffset, GLint x,&#10;                                             GLint y, GLsizei width,&#10;                                             GLsizei height );&#10;&#10;typedef void ( * PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const GLvoid *indices);&#10;typedef void ( * PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const GLvoid *pixels);&#10;typedef void ( * PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const GLvoid *pixels);&#10;typedef void ( * PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;# 1603 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorTable( GLenum target, GLenum internalformat,&#10;                                    GLsizei width, GLenum format,&#10;                                    GLenum type, const GLvoid *table );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorSubTable( GLenum target,&#10;                                       GLsizei start, GLsizei count,&#10;                                       GLenum format, GLenum type,&#10;                                       const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorTableParameteriv(GLenum target, GLenum pname,&#10;                                              const GLint *params);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glColorTableParameterfv(GLenum target, GLenum pname,&#10;                                              const GLfloat *params);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyColorSubTable( GLenum target, GLsizei start,&#10;                                           GLint x, GLint y, GLsizei width );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyColorTable( GLenum target, GLenum internalformat,&#10;                                        GLint x, GLint y, GLsizei width );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetColorTable( GLenum target, GLenum format,&#10;                                       GLenum type, GLvoid *table );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetColorTableParameterfv( GLenum target, GLenum pname,&#10;                                                  GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetColorTableParameteriv( GLenum target, GLenum pname,&#10;                                                  GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBlendEquation( GLenum mode );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glBlendColor( GLclampf red, GLclampf green,&#10;                                    GLclampf blue, GLclampf alpha );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glHistogram( GLenum target, GLsizei width,&#10;       GLenum internalformat, GLboolean sink );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glResetHistogram( GLenum target );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetHistogram( GLenum target, GLboolean reset,&#10;          GLenum format, GLenum type,&#10;          GLvoid *values );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetHistogramParameterfv( GLenum target, GLenum pname,&#10;       GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetHistogramParameteriv( GLenum target, GLenum pname,&#10;       GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMinmax( GLenum target, GLenum internalformat,&#10;    GLboolean sink );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glResetMinmax( GLenum target );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMinmax( GLenum target, GLboolean reset,&#10;                                   GLenum format, GLenum types,&#10;                                   GLvoid *values );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMinmaxParameterfv( GLenum target, GLenum pname,&#10;           GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetMinmaxParameteriv( GLenum target, GLenum pname,&#10;           GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionFilter1D( GLenum target,&#10; GLenum internalformat, GLsizei width, GLenum format, GLenum type,&#10; const GLvoid *image );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionFilter2D( GLenum target,&#10; GLenum internalformat, GLsizei width, GLsizei height, GLenum format,&#10; GLenum type, const GLvoid *image );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionParameterf( GLenum target, GLenum pname,&#10; GLfloat params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionParameterfv( GLenum target, GLenum pname,&#10; const GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionParameteri( GLenum target, GLenum pname,&#10; GLint params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glConvolutionParameteriv( GLenum target, GLenum pname,&#10; const GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyConvolutionFilter1D( GLenum target,&#10; GLenum internalformat, GLint x, GLint y, GLsizei width );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCopyConvolutionFilter2D( GLenum target,&#10; GLenum internalformat, GLint x, GLint y, GLsizei width,&#10; GLsizei height);&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetConvolutionFilter( GLenum target, GLenum format,&#10; GLenum type, GLvoid *image );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetConvolutionParameterfv( GLenum target, GLenum pname,&#10; GLfloat *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetConvolutionParameteriv( GLenum target, GLenum pname,&#10; GLint *params );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glSeparableFilter2D( GLenum target,&#10; GLenum internalformat, GLsizei width, GLsizei height, GLenum format,&#10; GLenum type, const GLvoid *row, const GLvoid *column );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetSeparableFilter( GLenum target, GLenum format,&#10; GLenum type, GLvoid *row, GLvoid *column, GLvoid *span );&#10;# 1823 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glActiveTexture( GLenum texture );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glClientActiveTexture( GLenum texture );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexImage1D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexImage2D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexImage3D( GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexSubImage1D( GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexSubImage2D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glCompressedTexSubImage3D( GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glGetCompressedTexImage( GLenum target, GLint lod, GLvoid *img );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1d( GLenum target, GLdouble s );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1dv( GLenum target, const GLdouble *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1f( GLenum target, GLfloat s );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1fv( GLenum target, const GLfloat *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1i( GLenum target, GLint s );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1iv( GLenum target, const GLint *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1s( GLenum target, GLshort s );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1sv( GLenum target, const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2d( GLenum target, GLdouble s, GLdouble t );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2dv( GLenum target, const GLdouble *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2f( GLenum target, GLfloat s, GLfloat t );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2fv( GLenum target, const GLfloat *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2i( GLenum target, GLint s, GLint t );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2iv( GLenum target, const GLint *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2s( GLenum target, GLshort s, GLshort t );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2sv( GLenum target, const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3d( GLenum target, GLdouble s, GLdouble t, GLdouble r );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3dv( GLenum target, const GLdouble *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3f( GLenum target, GLfloat s, GLfloat t, GLfloat r );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3fv( GLenum target, const GLfloat *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3i( GLenum target, GLint s, GLint t, GLint r );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3iv( GLenum target, const GLint *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3s( GLenum target, GLshort s, GLshort t, GLshort r );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3sv( GLenum target, const GLshort *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4d( GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4dv( GLenum target, const GLdouble *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4f( GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4fv( GLenum target, const GLfloat *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4i( GLenum target, GLint s, GLint t, GLint r, GLint q );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4iv( GLenum target, const GLint *v );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4s( GLenum target, GLshort s, GLshort t, GLshort r, GLshort q );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4sv( GLenum target, const GLshort *v );&#10;&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadTransposeMatrixd( const GLdouble m[16] );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glLoadTransposeMatrixf( const GLfloat m[16] );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultTransposeMatrixd( const GLdouble m[16] );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glMultTransposeMatrixf( const GLfloat m[16] );&#10;&#10;__attribute__((visibility(&quot;default&quot;))) void glSampleCoverage( GLclampf value, GLboolean invert );&#10;&#10;&#10;typedef void ( * PFNGLACTIVETEXTUREPROC) (GLenum texture);&#10;typedef void ( * PFNGLSAMPLECOVERAGEPROC) (GLclampf value, GLboolean invert);&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const GLvoid *data);&#10;typedef void ( * PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, GLvoid *img);&#10;# 1971 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glActiveTextureARB(GLenum texture);&#10;__attribute__((visibility(&quot;default&quot;))) void glClientActiveTextureARB(GLenum texture);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1dARB(GLenum target, GLdouble s);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1dvARB(GLenum target, const GLdouble *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1fARB(GLenum target, GLfloat s);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1fvARB(GLenum target, const GLfloat *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1iARB(GLenum target, GLint s);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1ivARB(GLenum target, const GLint *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1sARB(GLenum target, GLshort s);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord1svARB(GLenum target, const GLshort *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2dARB(GLenum target, GLdouble s, GLdouble t);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2dvARB(GLenum target, const GLdouble *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2fARB(GLenum target, GLfloat s, GLfloat t);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2fvARB(GLenum target, const GLfloat *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2iARB(GLenum target, GLint s, GLint t);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2ivARB(GLenum target, const GLint *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2sARB(GLenum target, GLshort s, GLshort t);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord2svARB(GLenum target, const GLshort *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3dvARB(GLenum target, const GLdouble *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3fvARB(GLenum target, const GLfloat *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3iARB(GLenum target, GLint s, GLint t, GLint r);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3ivARB(GLenum target, const GLint *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3sARB(GLenum target, GLshort s, GLshort t, GLshort r);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord3svARB(GLenum target, const GLshort *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4dARB(GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4dvARB(GLenum target, const GLdouble *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4fARB(GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4fvARB(GLenum target, const GLfloat *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4iARB(GLenum target, GLint s, GLint t, GLint r, GLint q);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4ivARB(GLenum target, const GLint *v);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4sARB(GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);&#10;__attribute__((visibility(&quot;default&quot;))) void glMultiTexCoord4svARB(GLenum target, const GLshort *v);&#10;&#10;typedef void ( * PFNGLACTIVETEXTUREARBPROC) (GLenum texture);&#10;typedef void ( * PFNGLCLIENTACTIVETEXTUREARBPROC) (GLenum texture);&#10;typedef void ( * PFNGLMULTITEXCOORD1DARBPROC) (GLenum target, GLdouble s);&#10;typedef void ( * PFNGLMULTITEXCOORD1DVARBPROC) (GLenum target, const GLdouble *v);&#10;typedef void ( * PFNGLMULTITEXCOORD1FARBPROC) (GLenum target, GLfloat s);&#10;typedef void ( * PFNGLMULTITEXCOORD1FVARBPROC) (GLenum target, const GLfloat *v);&#10;typedef void ( * PFNGLMULTITEXCOORD1IARBPROC) (GLenum target, GLint s);&#10;typedef void ( * PFNGLMULTITEXCOORD1IVARBPROC) (GLenum target, const GLint *v);&#10;typedef void ( * PFNGLMULTITEXCOORD1SARBPROC) (GLenum target, GLshort s);&#10;typedef void ( * PFNGLMULTITEXCOORD1SVARBPROC) (GLenum target, const GLshort *v);&#10;typedef void ( * PFNGLMULTITEXCOORD2DARBPROC) (GLenum target, GLdouble s, GLdouble t);&#10;typedef void ( * PFNGLMULTITEXCOORD2DVARBPROC) (GLenum target, const GLdouble *v);&#10;typedef void ( * PFNGLMULTITEXCOORD2FARBPROC) (GLenum target, GLfloat s, GLfloat t);&#10;typedef void ( * PFNGLMULTITEXCOORD2FVARBPROC) (GLenum target, const GLfloat *v);&#10;typedef void ( * PFNGLMULTITEXCOORD2IARBPROC) (GLenum target, GLint s, GLint t);&#10;typedef void ( * PFNGLMULTITEXCOORD2IVARBPROC) (GLenum target, const GLint *v);&#10;typedef void ( * PFNGLMULTITEXCOORD2SARBPROC) (GLenum target, GLshort s, GLshort t);&#10;typedef void ( * PFNGLMULTITEXCOORD2SVARBPROC) (GLenum target, const GLshort *v);&#10;typedef void ( * PFNGLMULTITEXCOORD3DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r);&#10;typedef void ( * PFNGLMULTITEXCOORD3DVARBPROC) (GLenum target, const GLdouble *v);&#10;typedef void ( * PFNGLMULTITEXCOORD3FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r);&#10;typedef void ( * PFNGLMULTITEXCOORD3FVARBPROC) (GLenum target, const GLfloat *v);&#10;typedef void ( * PFNGLMULTITEXCOORD3IARBPROC) (GLenum target, GLint s, GLint t, GLint r);&#10;typedef void ( * PFNGLMULTITEXCOORD3IVARBPROC) (GLenum target, const GLint *v);&#10;typedef void ( * PFNGLMULTITEXCOORD3SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r);&#10;typedef void ( * PFNGLMULTITEXCOORD3SVARBPROC) (GLenum target, const GLshort *v);&#10;typedef void ( * PFNGLMULTITEXCOORD4DARBPROC) (GLenum target, GLdouble s, GLdouble t, GLdouble r, GLdouble q);&#10;typedef void ( * PFNGLMULTITEXCOORD4DVARBPROC) (GLenum target, const GLdouble *v);&#10;typedef void ( * PFNGLMULTITEXCOORD4FARBPROC) (GLenum target, GLfloat s, GLfloat t, GLfloat r, GLfloat q);&#10;typedef void ( * PFNGLMULTITEXCOORD4FVARBPROC) (GLenum target, const GLfloat *v);&#10;typedef void ( * PFNGLMULTITEXCOORD4IARBPROC) (GLenum target, GLint s, GLint t, GLint r, GLint q);&#10;typedef void ( * PFNGLMULTITEXCOORD4IVARBPROC) (GLenum target, const GLint *v);&#10;typedef void ( * PFNGLMULTITEXCOORD4SARBPROC) (GLenum target, GLshort s, GLshort t, GLshort r, GLshort q);&#10;typedef void ( * PFNGLMULTITEXCOORD4SVARBPROC) (GLenum target, const GLshort *v);&#10;# 2055 &quot;/usr/include/GL/gl.h&quot;&#10;# 1 &quot;/usr/include/GL/glext.h&quot; 1 3 4&#10;# 367 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);&#10;typedef void ( * PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);&#10;typedef void ( * PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLFOGCOORDFPROC) (GLfloat coord);&#10;typedef void ( * PFNGLFOGCOORDFVPROC) (const GLfloat *coord);&#10;typedef void ( * PFNGLFOGCOORDDPROC) (GLdouble coord);&#10;typedef void ( * PFNGLFOGCOORDDVPROC) (const GLdouble *coord);&#10;typedef void ( * PFNGLFOGCOORDPOINTERPROC) (GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLSECONDARYCOLOR3BPROC) (GLbyte red, GLbyte green, GLbyte blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3BVPROC) (const GLbyte *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3DPROC) (GLdouble red, GLdouble green, GLdouble blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3DVPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3FPROC) (GLfloat red, GLfloat green, GLfloat blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3FVPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3IPROC) (GLint red, GLint green, GLint blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3IVPROC) (const GLint *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3SPROC) (GLshort red, GLshort green, GLshort blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3SVPROC) (const GLshort *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UBPROC) (GLubyte red, GLubyte green, GLubyte blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UBVPROC) (const GLubyte *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UIPROC) (GLuint red, GLuint green, GLuint blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UIVPROC) (const GLuint *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3USPROC) (GLushort red, GLushort green, GLushort blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3USVPROC) (const GLushort *v);&#10;typedef void ( * PFNGLSECONDARYCOLORPOINTERPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLWINDOWPOS2DPROC) (GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLWINDOWPOS2DVPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS2FPROC) (GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLWINDOWPOS2FVPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS2IPROC) (GLint x, GLint y);&#10;typedef void ( * PFNGLWINDOWPOS2IVPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS2SPROC) (GLshort x, GLshort y);&#10;typedef void ( * PFNGLWINDOWPOS2SVPROC) (const GLshort *v);&#10;typedef void ( * PFNGLWINDOWPOS3DPROC) (GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLWINDOWPOS3DVPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS3FPROC) (GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLWINDOWPOS3FVPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS3IPROC) (GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLWINDOWPOS3IVPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS3SPROC) (GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLWINDOWPOS3SVPROC) (const GLshort *v);&#10;typedef void ( * PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);&#10;typedef void ( * PFNGLBLENDEQUATIONPROC) (GLenum mode);&#10;# 467 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;# 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stddef.h&quot; 1 3 4&#10;# 147 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stddef.h&quot; 3 4&#10;typedef long int ptrdiff_t;&#10;# 212 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stddef.h&quot; 3 4&#10;typedef long unsigned int size_t;&#10;# 324 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stddef.h&quot; 3 4&#10;typedef int wchar_t;&#10;# 468 &quot;/usr/include/GL/glext.h&quot; 2 3 4&#10;typedef ptrdiff_t GLsizeiptr;&#10;typedef ptrdiff_t GLintptr;&#10;# 520 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids);&#10;typedef void ( * PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids);&#10;typedef GLboolean ( * PFNGLISQUERYPROC) (GLuint id);&#10;typedef void ( * PFNGLBEGINQUERYPROC) (GLenum target, GLuint id);&#10;typedef void ( * PFNGLENDQUERYPROC) (GLenum target);&#10;typedef void ( * PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer);&#10;typedef void ( * PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers);&#10;typedef void ( * PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers);&#10;typedef GLboolean ( * PFNGLISBUFFERPROC) (GLuint buffer);&#10;typedef void ( * PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage);&#10;typedef void ( * PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data);&#10;typedef void ( * PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data);&#10;typedef void *( * PFNGLMAPBUFFERPROC) (GLenum target, GLenum access);&#10;typedef GLboolean ( * PFNGLUNMAPBUFFERPROC) (GLenum target);&#10;typedef void ( * PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params);&#10;# 564 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef char GLchar;&#10;# 649 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha);&#10;typedef void ( * PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs);&#10;typedef void ( * PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);&#10;typedef void ( * PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask);&#10;typedef void ( * PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask);&#10;typedef void ( * PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader);&#10;typedef void ( * PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name);&#10;typedef void ( * PFNGLCOMPILESHADERPROC) (GLuint shader);&#10;typedef GLuint ( * PFNGLCREATEPROGRAMPROC) (void);&#10;typedef GLuint ( * PFNGLCREATESHADERPROC) (GLenum type);&#10;typedef void ( * PFNGLDELETEPROGRAMPROC) (GLuint program);&#10;typedef void ( * PFNGLDELETESHADERPROC) (GLuint shader);&#10;typedef void ( * PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader);&#10;typedef void ( * PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index);&#10;typedef void ( * PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index);&#10;typedef void ( * PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);&#10;typedef void ( * PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);&#10;typedef GLint ( * PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);&#10;typedef void ( * PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);&#10;typedef void ( * PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);&#10;typedef GLint ( * PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params);&#10;typedef void ( * PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer);&#10;typedef GLboolean ( * PFNGLISPROGRAMPROC) (GLuint program);&#10;typedef GLboolean ( * PFNGLISSHADERPROC) (GLuint shader);&#10;typedef void ( * PFNGLLINKPROGRAMPROC) (GLuint program);&#10;typedef void ( * PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);&#10;typedef void ( * PFNGLUSEPROGRAMPROC) (GLuint program);&#10;typedef void ( * PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0);&#10;typedef void ( * PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1);&#10;typedef void ( * PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);&#10;typedef void ( * PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);&#10;typedef void ( * PFNGLUNIFORM1IPROC) (GLint location, GLint v0);&#10;typedef void ( * PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1);&#10;typedef void ( * PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2);&#10;typedef void ( * PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);&#10;typedef void ( * PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLVALIDATEPROGRAMPROC) (GLuint program);&#10;typedef void ( * PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x);&#10;typedef void ( * PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x);&#10;typedef void ( * PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x);&#10;typedef void ( * PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y);&#10;typedef void ( * PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);&#10;typedef void ( * PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);&#10;# 864 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;# 882 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef unsigned short GLhalf;&#10;# 1104 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);&#10;typedef void ( * PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data);&#10;typedef void ( * PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data);&#10;typedef void ( * PFNGLENABLEIPROC) (GLenum target, GLuint index);&#10;typedef void ( * PFNGLDISABLEIPROC) (GLenum target, GLuint index);&#10;typedef GLboolean ( * PFNGLISENABLEDIPROC) (GLenum target, GLuint index);&#10;typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode);&#10;typedef void ( * PFNGLENDTRANSFORMFEEDBACKPROC) (void);&#10;typedef void ( * PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);&#10;typedef void ( * PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer);&#10;typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);&#10;typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);&#10;typedef void ( * PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp);&#10;typedef void ( * PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode);&#10;typedef void ( * PFNGLENDCONDITIONALRENDERPROC) (void);&#10;typedef void ( * PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x);&#10;typedef void ( * PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y);&#10;typedef void ( * PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x);&#10;typedef void ( * PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y);&#10;typedef void ( * PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);&#10;typedef void ( * PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params);&#10;typedef void ( * PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name);&#10;typedef GLint ( * PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0);&#10;typedef void ( * PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1);&#10;typedef void ( * PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);&#10;typedef void ( * PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);&#10;typedef void ( * PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params);&#10;typedef void ( * PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value);&#10;typedef void ( * PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value);&#10;typedef void ( * PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value);&#10;typedef void ( * PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);&#10;typedef const GLubyte *( * PFNGLGETSTRINGIPROC) (GLenum name, GLuint index);&#10;typedef GLboolean ( * PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer);&#10;typedef void ( * PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer);&#10;typedef void ( * PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers);&#10;typedef void ( * PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers);&#10;typedef void ( * PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef GLboolean ( * PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer);&#10;typedef void ( * PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer);&#10;typedef void ( * PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers);&#10;typedef void ( * PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers);&#10;typedef GLenum ( * PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);&#10;typedef void ( * PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);&#10;typedef void ( * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGENERATEMIPMAPPROC) (GLenum target);&#10;typedef void ( * PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);&#10;typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);&#10;typedef void *( * PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access);&#10;typedef void ( * PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length);&#10;typedef void ( * PFNGLBINDVERTEXARRAYPROC) (GLuint array);&#10;typedef void ( * PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays);&#10;typedef void ( * PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays);&#10;typedef GLboolean ( * PFNGLISVERTEXARRAYPROC) (GLuint array);&#10;# 1336 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);&#10;typedef void ( * PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer);&#10;typedef void ( * PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index);&#10;typedef void ( * PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);&#10;typedef void ( * PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);&#10;typedef GLuint ( * PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);&#10;typedef void ( * PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);&#10;# 1366 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef struct __GLsync *GLsync;&#10;# 1401 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;# 1 &quot;/usr/include/inttypes.h&quot; 1 3 4&#10;# 25 &quot;/usr/include/inttypes.h&quot; 3 4&#10;# 1 &quot;/usr/include/features.h&quot; 1 3 4&#10;# 379 &quot;/usr/include/features.h&quot; 3 4&#10;# 1 &quot;/usr/include/sys/cdefs.h&quot; 1 3 4&#10;# 385 &quot;/usr/include/sys/cdefs.h&quot; 3 4&#10;# 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4&#10;# 386 &quot;/usr/include/sys/cdefs.h&quot; 2 3 4&#10;# 380 &quot;/usr/include/features.h&quot; 2 3 4&#10;# 403 &quot;/usr/include/features.h&quot; 3 4&#10;# 1 &quot;/usr/include/gnu/stubs.h&quot; 1 3 4&#10;# 10 &quot;/usr/include/gnu/stubs.h&quot; 3 4&#10;# 1 &quot;/usr/include/gnu/stubs-64.h&quot; 1 3 4&#10;# 11 &quot;/usr/include/gnu/stubs.h&quot; 2 3 4&#10;# 404 &quot;/usr/include/features.h&quot; 2 3 4&#10;# 26 &quot;/usr/include/inttypes.h&quot; 2 3 4&#10;&#10;# 1 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stdint.h&quot; 1 3 4&#10;# 9 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stdint.h&quot; 3 4&#10;# 1 &quot;/usr/include/stdint.h&quot; 1 3 4&#10;# 26 &quot;/usr/include/stdint.h&quot; 3 4&#10;# 1 &quot;/usr/include/bits/wchar.h&quot; 1 3 4&#10;# 27 &quot;/usr/include/stdint.h&quot; 2 3 4&#10;# 1 &quot;/usr/include/bits/wordsize.h&quot; 1 3 4&#10;# 28 &quot;/usr/include/stdint.h&quot; 2 3 4&#10;# 36 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef signed char int8_t;&#10;typedef short int int16_t;&#10;typedef int int32_t;&#10;&#10;typedef long int int64_t;&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef unsigned char uint8_t;&#10;typedef unsigned short int uint16_t;&#10;&#10;typedef unsigned int uint32_t;&#10;&#10;&#10;&#10;typedef unsigned long int uint64_t;&#10;# 65 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef signed char int_least8_t;&#10;typedef short int int_least16_t;&#10;typedef int int_least32_t;&#10;&#10;typedef long int int_least64_t;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef unsigned char uint_least8_t;&#10;typedef unsigned short int uint_least16_t;&#10;typedef unsigned int uint_least32_t;&#10;&#10;typedef unsigned long int uint_least64_t;&#10;# 90 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef signed char int_fast8_t;&#10;&#10;typedef long int int_fast16_t;&#10;typedef long int int_fast32_t;&#10;typedef long int int_fast64_t;&#10;# 103 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef unsigned char uint_fast8_t;&#10;&#10;typedef unsigned long int uint_fast16_t;&#10;typedef unsigned long int uint_fast32_t;&#10;typedef unsigned long int uint_fast64_t;&#10;# 119 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef long int intptr_t;&#10;&#10;&#10;typedef unsigned long int uintptr_t;&#10;# 134 &quot;/usr/include/stdint.h&quot; 3 4&#10;typedef long int intmax_t;&#10;typedef unsigned long int uintmax_t;&#10;# 10 &quot;/usr/lib/gcc/x86_64-pc-linux-gnu/4.8.3/include/stdint.h&quot; 2 3 4&#10;# 28 &quot;/usr/include/inttypes.h&quot; 2 3 4&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef int __gwchar_t;&#10;# 266 &quot;/usr/include/inttypes.h&quot; 3 4&#10;&#10;&#10;&#10;&#10;&#10;typedef struct&#10;  {&#10;    long int quot;&#10;    long int rem;&#10;  } imaxdiv_t;&#10;# 290 &quot;/usr/include/inttypes.h&quot; 3 4&#10;extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));&#10;&#10;&#10;extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)&#10;      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));&#10;&#10;&#10;extern intmax_t strtoimax (const char *__restrict __nptr,&#10;      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));&#10;&#10;&#10;extern uintmax_t strtoumax (const char *__restrict __nptr,&#10;       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));&#10;&#10;&#10;extern intmax_t wcstoimax (const __gwchar_t *__restrict __nptr,&#10;      __gwchar_t **__restrict __endptr, int __base)&#10;     __attribute__ ((__nothrow__ , __leaf__));&#10;&#10;&#10;extern uintmax_t wcstoumax (const __gwchar_t *__restrict __nptr,&#10;       __gwchar_t ** __restrict __endptr, int __base)&#10;     __attribute__ ((__nothrow__ , __leaf__));&#10;# 432 &quot;/usr/include/inttypes.h&quot; 3 4&#10;&#10;# 1402 &quot;/usr/include/GL/glext.h&quot; 2 3 4&#10;&#10;&#10;typedef uint64_t GLuint64;&#10;typedef int64_t GLint64;&#10;# 1470 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);&#10;typedef void ( * PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);&#10;typedef void ( * PFNGLPROVOKINGVERTEXPROC) (GLenum mode);&#10;typedef GLsync ( * PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags);&#10;typedef GLboolean ( * PFNGLISSYNCPROC) (GLsync sync);&#10;typedef void ( * PFNGLDELETESYNCPROC) (GLsync sync);&#10;typedef GLenum ( * PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);&#10;typedef void ( * PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout);&#10;typedef void ( * PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data);&#10;typedef void ( * PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);&#10;typedef void ( * PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data);&#10;typedef void ( * PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);&#10;typedef void ( * PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val);&#10;typedef void ( * PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask);&#10;# 1530 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);&#10;typedef GLint ( * PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers);&#10;typedef void ( * PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers);&#10;typedef GLboolean ( * PFNGLISSAMPLERPROC) (GLuint sampler);&#10;typedef void ( * PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler);&#10;typedef void ( * PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param);&#10;typedef void ( * PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param);&#10;typedef void ( * PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param);&#10;typedef void ( * PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param);&#10;typedef void ( * PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param);&#10;typedef void ( * PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target);&#10;typedef void ( * PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params);&#10;typedef void ( * PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor);&#10;typedef void ( * PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);&#10;typedef void ( * PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);&#10;typedef void ( * PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);&#10;typedef void ( * PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value);&#10;typedef void ( * PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXP2UIPROC) (GLenum type, GLuint value);&#10;typedef void ( * PFNGLVERTEXP2UIVPROC) (GLenum type, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXP3UIPROC) (GLenum type, GLuint value);&#10;typedef void ( * PFNGLVERTEXP3UIVPROC) (GLenum type, const GLuint *value);&#10;typedef void ( * PFNGLVERTEXP4UIPROC) (GLenum type, GLuint value);&#10;typedef void ( * PFNGLVERTEXP4UIVPROC) (GLenum type, const GLuint *value);&#10;typedef void ( * PFNGLTEXCOORDP1UIPROC) (GLenum type, GLuint coords);&#10;typedef void ( * PFNGLTEXCOORDP1UIVPROC) (GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLTEXCOORDP2UIPROC) (GLenum type, GLuint coords);&#10;typedef void ( * PFNGLTEXCOORDP2UIVPROC) (GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLTEXCOORDP3UIPROC) (GLenum type, GLuint coords);&#10;typedef void ( * PFNGLTEXCOORDP3UIVPROC) (GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLTEXCOORDP4UIPROC) (GLenum type, GLuint coords);&#10;typedef void ( * PFNGLTEXCOORDP4UIVPROC) (GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP1UIPROC) (GLenum texture, GLenum type, GLuint coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP1UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP2UIPROC) (GLenum texture, GLenum type, GLuint coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP2UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP3UIPROC) (GLenum texture, GLenum type, GLuint coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP3UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP4UIPROC) (GLenum texture, GLenum type, GLuint coords);&#10;typedef void ( * PFNGLMULTITEXCOORDP4UIVPROC) (GLenum texture, GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLNORMALP3UIPROC) (GLenum type, GLuint coords);&#10;typedef void ( * PFNGLNORMALP3UIVPROC) (GLenum type, const GLuint *coords);&#10;typedef void ( * PFNGLCOLORP3UIPROC) (GLenum type, GLuint color);&#10;typedef void ( * PFNGLCOLORP3UIVPROC) (GLenum type, const GLuint *color);&#10;typedef void ( * PFNGLCOLORP4UIPROC) (GLenum type, GLuint color);&#10;typedef void ( * PFNGLCOLORP4UIVPROC) (GLenum type, const GLuint *color);&#10;typedef void ( * PFNGLSECONDARYCOLORP3UIPROC) (GLenum type, GLuint color);&#10;typedef void ( * PFNGLSECONDARYCOLORP3UIVPROC) (GLenum type, const GLuint *color);&#10;# 1729 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMINSAMPLESHADINGPROC) (GLfloat value);&#10;typedef void ( * PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode);&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);&#10;typedef void ( * PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst);&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);&#10;typedef void ( * PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect);&#10;typedef void ( * PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect);&#10;typedef void ( * PFNGLUNIFORM1DPROC) (GLint location, GLdouble x);&#10;typedef void ( * PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params);&#10;typedef GLint ( * PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name);&#10;typedef GLuint ( * PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name);&#10;typedef void ( * PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);&#10;typedef void ( * PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);&#10;typedef void ( * PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name);&#10;typedef void ( * PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices);&#10;typedef void ( * PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params);&#10;typedef void ( * PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values);&#10;typedef void ( * PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value);&#10;typedef void ( * PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values);&#10;typedef void ( * PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id);&#10;typedef void ( * PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids);&#10;typedef void ( * PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids);&#10;typedef GLboolean ( * PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id);&#10;typedef void ( * PFNGLPAUSETRANSFORMFEEDBACKPROC) (void);&#10;typedef void ( * PFNGLRESUMETRANSFORMFEEDBACKPROC) (void);&#10;typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id);&#10;typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream);&#10;typedef void ( * PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id);&#10;typedef void ( * PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index);&#10;typedef void ( * PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);&#10;# 1862 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLRELEASESHADERCOMPILERPROC) (void);&#10;typedef void ( * PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length);&#10;typedef void ( * PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);&#10;typedef void ( * PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f);&#10;typedef void ( * PFNGLCLEARDEPTHFPROC) (GLfloat d);&#10;typedef void ( * PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);&#10;typedef void ( * PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);&#10;typedef void ( * PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value);&#10;typedef void ( * PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program);&#10;typedef void ( * PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program);&#10;typedef GLuint ( * PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings);&#10;typedef void ( * PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline);&#10;typedef void ( * PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines);&#10;typedef void ( * PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines);&#10;typedef GLboolean ( * PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline);&#10;typedef void ( * PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline);&#10;typedef void ( * PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);&#10;typedef void ( * PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x);&#10;typedef void ( * PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);&#10;typedef void ( * PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v);&#10;typedef void ( * PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f);&#10;typedef void ( * PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data);&#10;typedef void ( * PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data);&#10;# 2152 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);&#10;typedef void ( * PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params);&#10;typedef void ( * PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);&#10;typedef void ( * PFNGLMEMORYBARRIERPROC) (GLbitfield barriers);&#10;typedef void ( * PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);&#10;typedef void ( * PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);&#10;typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount);&#10;typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);&#10;# 2182 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);&#10;# 2440 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);&#10;typedef void ( * PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect);&#10;typedef void ( * PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);&#10;typedef void ( * PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params);&#10;typedef void ( * PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);&#10;typedef void ( * PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level);&#10;typedef void ( * PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);&#10;typedef void ( * PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer);&#10;typedef void ( * PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments);&#10;typedef void ( * PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);&#10;typedef void ( * PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params);&#10;typedef GLuint ( * PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);&#10;typedef void ( * PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);&#10;typedef void ( * PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params);&#10;typedef GLint ( * PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name);&#10;typedef GLint ( * PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name);&#10;typedef void ( * PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);&#10;typedef void ( * PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);&#10;typedef void ( * PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);&#10;typedef void ( * PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);&#10;typedef void ( * PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex);&#10;typedef void ( * PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor);&#10;typedef void ( * PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);&#10;typedef void ( * PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);&#10;typedef void ( * PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam);&#10;typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);&#10;typedef void ( * PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message);&#10;typedef void ( * PFNGLPOPDEBUGGROUPPROC) (void);&#10;typedef void ( * PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label);&#10;typedef void ( * PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);&#10;typedef void ( * PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label);&#10;typedef void ( * PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);&#10;# 2551 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);&#10;typedef void ( * PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers);&#10;typedef void ( * PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);&#10;typedef void ( * PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);&#10;typedef void ( * PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers);&#10;typedef void ( * PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures);&#10;typedef void ( * PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);&#10;# 2591 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef uint64_t GLuint64EXT;&#10;&#10;typedef GLuint64 ( * PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture);&#10;typedef GLuint64 ( * PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler);&#10;typedef void ( * PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);&#10;typedef void ( * PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle);&#10;typedef GLuint64 ( * PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);&#10;typedef void ( * PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access);&#10;typedef void ( * PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle);&#10;typedef void ( * PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value);&#10;typedef void ( * PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);&#10;typedef GLboolean ( * PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle);&#10;typedef GLboolean ( * PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle);&#10;typedef void ( * PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x);&#10;typedef void ( * PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v);&#10;typedef void ( * PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params);&#10;# 2639 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;struct _cl_context;&#10;struct _cl_event;&#10;&#10;&#10;typedef GLsync ( * PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags);&#10;# 2664 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCLAMPCOLORARBPROC) (GLenum target, GLenum clamp);&#10;# 2689 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z);&#10;# 2711 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);&#10;# 2734 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);&#10;typedef void ( * PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);&#10;typedef void ( * PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam);&#10;typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog);&#10;# 2782 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWBUFFERSARBPROC) (GLsizei n, const GLenum *bufs);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode);&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);&#10;typedef void ( * PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst);&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);&#10;# 2812 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWARRAYSINSTANCEDARBPROC) (GLenum mode, GLint first, GLsizei count, GLsizei primcount);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDARBPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);&#10;# 2920 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMSTRINGARBPROC) (GLenum target, GLenum format, GLsizei len, const void *string);&#10;typedef void ( * PFNGLBINDPROGRAMARBPROC) (GLenum target, GLuint program);&#10;typedef void ( * PFNGLDELETEPROGRAMSARBPROC) (GLsizei n, const GLuint *programs);&#10;typedef void ( * PFNGLGENPROGRAMSARBPROC) (GLsizei n, GLuint *programs);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETER4DARBPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETER4DVARBPROC) (GLenum target, GLuint index, const GLdouble *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETER4FARBPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETER4FVARBPROC) (GLenum target, GLuint index, const GLfloat *params);&#10;typedef void ( * PFNGLGETPROGRAMENVPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);&#10;typedef void ( * PFNGLGETPROGRAMENVPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);&#10;typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC) (GLenum target, GLuint index, GLdouble *params);&#10;typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC) (GLenum target, GLuint index, GLfloat *params);&#10;typedef void ( * PFNGLGETPROGRAMIVARBPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETPROGRAMSTRINGARBPROC) (GLenum target, GLenum pname, void *string);&#10;typedef GLboolean ( * PFNGLISPROGRAMARBPROC) (GLuint program);&#10;# 3005 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMPARAMETERIARBPROC) (GLuint program, GLenum pname, GLint value);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTUREARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYERARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTUREFACEARBPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);&#10;# 3031 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef unsigned short GLhalfARB;&#10;# 3179 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);&#10;# 3190 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBDIVISORARBPROC) (GLuint index, GLuint divisor);&#10;# 3229 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCURRENTPALETTEMATRIXARBPROC) (GLint index);&#10;typedef void ( * PFNGLMATRIXINDEXUBVARBPROC) (GLint size, const GLubyte *indices);&#10;typedef void ( * PFNGLMATRIXINDEXUSVARBPROC) (GLint size, const GLushort *indices);&#10;typedef void ( * PFNGLMATRIXINDEXUIVARBPROC) (GLint size, const GLuint *indices);&#10;typedef void ( * PFNGLMATRIXINDEXPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;# 3262 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSAMPLECOVERAGEARBPROC) (GLfloat value, GLboolean invert);&#10;# 3384 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGENQUERIESARBPROC) (GLsizei n, GLuint *ids);&#10;typedef void ( * PFNGLDELETEQUERIESARBPROC) (GLsizei n, const GLuint *ids);&#10;typedef GLboolean ( * PFNGLISQUERYARBPROC) (GLuint id);&#10;typedef void ( * PFNGLBEGINQUERYARBPROC) (GLenum target, GLuint id);&#10;typedef void ( * PFNGLENDQUERYARBPROC) (GLenum target);&#10;typedef void ( * PFNGLGETQUERYIVARBPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTIVARBPROC) (GLuint id, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTUIVARBPROC) (GLuint id, GLenum pname, GLuint *params);&#10;# 3422 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPOINTPARAMETERFARBPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPOINTPARAMETERFVARBPROC) (GLenum pname, const GLfloat *params);&#10;# 3461 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLenum ( * PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void);&#10;typedef void ( * PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img);&#10;typedef void ( * PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);&#10;typedef void ( * PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img);&#10;typedef void ( * PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params);&#10;typedef void ( * PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params);&#10;typedef void ( * PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params);&#10;typedef void ( * PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params);&#10;typedef void ( * PFNGLGETNMAPDVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);&#10;typedef void ( * PFNGLGETNMAPFVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);&#10;typedef void ( * PFNGLGETNMAPIVARBPROC) (GLenum target, GLenum query, GLsizei bufSize, GLint *v);&#10;typedef void ( * PFNGLGETNPIXELMAPFVARBPROC) (GLenum map, GLsizei bufSize, GLfloat *values);&#10;typedef void ( * PFNGLGETNPIXELMAPUIVARBPROC) (GLenum map, GLsizei bufSize, GLuint *values);&#10;typedef void ( * PFNGLGETNPIXELMAPUSVARBPROC) (GLenum map, GLsizei bufSize, GLushort *values);&#10;typedef void ( * PFNGLGETNPOLYGONSTIPPLEARBPROC) (GLsizei bufSize, GLubyte *pattern);&#10;typedef void ( * PFNGLGETNCOLORTABLEARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);&#10;typedef void ( * PFNGLGETNCONVOLUTIONFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);&#10;typedef void ( * PFNGLGETNSEPARABLEFILTERARBPROC) (GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);&#10;typedef void ( * PFNGLGETNHISTOGRAMARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);&#10;typedef void ( * PFNGLGETNMINMAXARBPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);&#10;# 3513 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value);&#10;# 3564 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef unsigned int GLhandleARB;&#10;&#10;typedef char GLcharARB;&#10;# 3601 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDELETEOBJECTARBPROC) (GLhandleARB obj);&#10;typedef GLhandleARB ( * PFNGLGETHANDLEARBPROC) (GLenum pname);&#10;typedef void ( * PFNGLDETACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB attachedObj);&#10;typedef GLhandleARB ( * PFNGLCREATESHADEROBJECTARBPROC) (GLenum shaderType);&#10;typedef void ( * PFNGLSHADERSOURCEARBPROC) (GLhandleARB shaderObj, GLsizei count, const GLcharARB **string, const GLint *length);&#10;typedef void ( * PFNGLCOMPILESHADERARBPROC) (GLhandleARB shaderObj);&#10;typedef GLhandleARB ( * PFNGLCREATEPROGRAMOBJECTARBPROC) (void);&#10;typedef void ( * PFNGLATTACHOBJECTARBPROC) (GLhandleARB containerObj, GLhandleARB obj);&#10;typedef void ( * PFNGLLINKPROGRAMARBPROC) (GLhandleARB programObj);&#10;typedef void ( * PFNGLUSEPROGRAMOBJECTARBPROC) (GLhandleARB programObj);&#10;typedef void ( * PFNGLVALIDATEPROGRAMARBPROC) (GLhandleARB programObj);&#10;typedef void ( * PFNGLUNIFORM1FARBPROC) (GLint location, GLfloat v0);&#10;typedef void ( * PFNGLUNIFORM2FARBPROC) (GLint location, GLfloat v0, GLfloat v1);&#10;typedef void ( * PFNGLUNIFORM3FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2);&#10;typedef void ( * PFNGLUNIFORM4FARBPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);&#10;typedef void ( * PFNGLUNIFORM1IARBPROC) (GLint location, GLint v0);&#10;typedef void ( * PFNGLUNIFORM2IARBPROC) (GLint location, GLint v0, GLint v1);&#10;typedef void ( * PFNGLUNIFORM3IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2);&#10;typedef void ( * PFNGLUNIFORM4IARBPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3);&#10;typedef void ( * PFNGLUNIFORM1FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM2FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM3FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM4FVARBPROC) (GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORM1IVARBPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM2IVARBPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM3IVARBPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORM4IVARBPROC) (GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX2FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX3FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLUNIFORMMATRIX4FVARBPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLGETOBJECTPARAMETERFVARBPROC) (GLhandleARB obj, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETOBJECTPARAMETERIVARBPROC) (GLhandleARB obj, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETINFOLOGARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *infoLog);&#10;typedef void ( * PFNGLGETATTACHEDOBJECTSARBPROC) (GLhandleARB containerObj, GLsizei maxCount, GLsizei *count, GLhandleARB *obj);&#10;typedef GLint ( * PFNGLGETUNIFORMLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);&#10;typedef void ( * PFNGLGETACTIVEUNIFORMARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);&#10;typedef void ( * PFNGLGETUNIFORMFVARBPROC) (GLhandleARB programObj, GLint location, GLfloat *params);&#10;typedef void ( * PFNGLGETUNIFORMIVARBPROC) (GLhandleARB programObj, GLint location, GLint *params);&#10;typedef void ( * PFNGLGETSHADERSOURCEARBPROC) (GLhandleARB obj, GLsizei maxLength, GLsizei *length, GLcharARB *source);&#10;# 3717 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string);&#10;typedef void ( * PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);&#10;typedef void ( * PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length);&#10;typedef GLboolean ( * PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name);&#10;typedef void ( * PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string);&#10;typedef void ( * PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params);&#10;# 3762 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);&#10;# 3792 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXBUFFERARBPROC) (GLenum target, GLenum internalformat, GLuint buffer);&#10;# 3819 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE3DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE2DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXIMAGE1DARBPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);&#10;typedef void ( * PFNGLGETCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint level, void *img);&#10;# 4032 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLLOADTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);&#10;typedef void ( * PFNGLLOADTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);&#10;typedef void ( * PFNGLMULTTRANSPOSEMATRIXFARBPROC) (const GLfloat *m);&#10;typedef void ( * PFNGLMULTTRANSPOSEMATRIXDARBPROC) (const GLdouble *m);&#10;# 4111 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLWEIGHTBVARBPROC) (GLint size, const GLbyte *weights);&#10;typedef void ( * PFNGLWEIGHTSVARBPROC) (GLint size, const GLshort *weights);&#10;typedef void ( * PFNGLWEIGHTIVARBPROC) (GLint size, const GLint *weights);&#10;typedef void ( * PFNGLWEIGHTFVARBPROC) (GLint size, const GLfloat *weights);&#10;typedef void ( * PFNGLWEIGHTDVARBPROC) (GLint size, const GLdouble *weights);&#10;typedef void ( * PFNGLWEIGHTUBVARBPROC) (GLint size, const GLubyte *weights);&#10;typedef void ( * PFNGLWEIGHTUSVARBPROC) (GLint size, const GLushort *weights);&#10;typedef void ( * PFNGLWEIGHTUIVARBPROC) (GLint size, const GLuint *weights);&#10;typedef void ( * PFNGLWEIGHTPOINTERARBPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLVERTEXBLENDARBPROC) (GLint count);&#10;# 4137 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef ptrdiff_t GLsizeiptrARB;&#10;typedef ptrdiff_t GLintptrARB;&#10;# 4170 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDBUFFERARBPROC) (GLenum target, GLuint buffer);&#10;typedef void ( * PFNGLDELETEBUFFERSARBPROC) (GLsizei n, const GLuint *buffers);&#10;typedef void ( * PFNGLGENBUFFERSARBPROC) (GLsizei n, GLuint *buffers);&#10;typedef GLboolean ( * PFNGLISBUFFERARBPROC) (GLuint buffer);&#10;typedef void ( * PFNGLBUFFERDATAARBPROC) (GLenum target, GLsizeiptrARB size, const void *data, GLenum usage);&#10;typedef void ( * PFNGLBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, const void *data);&#10;typedef void ( * PFNGLGETBUFFERSUBDATAARBPROC) (GLenum target, GLintptrARB offset, GLsizeiptrARB size, void *data);&#10;typedef void *( * PFNGLMAPBUFFERARBPROC) (GLenum target, GLenum access);&#10;typedef GLboolean ( * PFNGLUNMAPBUFFERARBPROC) (GLenum target);&#10;typedef void ( * PFNGLGETBUFFERPARAMETERIVARBPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETBUFFERPOINTERVARBPROC) (GLenum target, GLenum pname, void **params);&#10;# 4214 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIB1DARBPROC) (GLuint index, GLdouble x);&#10;typedef void ( * PFNGLVERTEXATTRIB1DVARBPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1FARBPROC) (GLuint index, GLfloat x);&#10;typedef void ( * PFNGLVERTEXATTRIB1FVARBPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1SARBPROC) (GLuint index, GLshort x);&#10;typedef void ( * PFNGLVERTEXATTRIB1SVARBPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2DARBPROC) (GLuint index, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXATTRIB2DVARBPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2FARBPROC) (GLuint index, GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLVERTEXATTRIB2FVARBPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2SARBPROC) (GLuint index, GLshort x, GLshort y);&#10;typedef void ( * PFNGLVERTEXATTRIB2SVARBPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXATTRIB3DVARBPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLVERTEXATTRIB3FVARBPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLVERTEXATTRIB3SVARBPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NBVARBPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NIVARBPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NSVARBPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUBARBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUBVARBPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUIVARBPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4NUSVARBPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4BVARBPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4DARBPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXATTRIB4DVARBPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4FARBPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLVERTEXATTRIB4FVARBPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4IVARBPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4SARBPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);&#10;typedef void ( * PFNGLVERTEXATTRIB4SVARBPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4UBVARBPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4UIVARBPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4USVARBPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBPOINTERARBPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLENABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);&#10;typedef void ( * PFNGLDISABLEVERTEXATTRIBARRAYARBPROC) (GLuint index);&#10;typedef void ( * PFNGLGETVERTEXATTRIBDVARBPROC) (GLuint index, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBFVARBPROC) (GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIVARBPROC) (GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVARBPROC) (GLuint index, GLenum pname, void **pointer);&#10;# 4313 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDATTRIBLOCATIONARBPROC) (GLhandleARB programObj, GLuint index, const GLcharARB *name);&#10;typedef void ( * PFNGLGETACTIVEATTRIBARBPROC) (GLhandleARB programObj, GLuint index, GLsizei maxLength, GLsizei *length, GLint *size, GLenum *type, GLcharARB *name);&#10;typedef GLint ( * PFNGLGETATTRIBLOCATIONARBPROC) (GLhandleARB programObj, const GLcharARB *name);&#10;# 4337 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLWINDOWPOS2DARBPROC) (GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLWINDOWPOS2DVARBPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS2FARBPROC) (GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLWINDOWPOS2FVARBPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS2IARBPROC) (GLint x, GLint y);&#10;typedef void ( * PFNGLWINDOWPOS2IVARBPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS2SARBPROC) (GLshort x, GLshort y);&#10;typedef void ( * PFNGLWINDOWPOS2SVARBPROC) (const GLshort *v);&#10;typedef void ( * PFNGLWINDOWPOS3DARBPROC) (GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLWINDOWPOS3DVARBPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS3FARBPROC) (GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLWINDOWPOS3FVARBPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS3IARBPROC) (GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLWINDOWPOS3IVARBPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS3SARBPROC) (GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLWINDOWPOS3SVARBPROC) (const GLshort *v);&#10;# 4415 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMULTITEXCOORD1BOESPROC) (GLenum texture, GLbyte s);&#10;typedef void ( * PFNGLMULTITEXCOORD1BVOESPROC) (GLenum texture, const GLbyte *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD2BOESPROC) (GLenum texture, GLbyte s, GLbyte t);&#10;typedef void ( * PFNGLMULTITEXCOORD2BVOESPROC) (GLenum texture, const GLbyte *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD3BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r);&#10;typedef void ( * PFNGLMULTITEXCOORD3BVOESPROC) (GLenum texture, const GLbyte *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD4BOESPROC) (GLenum texture, GLbyte s, GLbyte t, GLbyte r, GLbyte q);&#10;typedef void ( * PFNGLMULTITEXCOORD4BVOESPROC) (GLenum texture, const GLbyte *coords);&#10;typedef void ( * PFNGLTEXCOORD1BOESPROC) (GLbyte s);&#10;typedef void ( * PFNGLTEXCOORD1BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLTEXCOORD2BOESPROC) (GLbyte s, GLbyte t);&#10;typedef void ( * PFNGLTEXCOORD2BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLTEXCOORD3BOESPROC) (GLbyte s, GLbyte t, GLbyte r);&#10;typedef void ( * PFNGLTEXCOORD3BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLTEXCOORD4BOESPROC) (GLbyte s, GLbyte t, GLbyte r, GLbyte q);&#10;typedef void ( * PFNGLTEXCOORD4BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLVERTEX2BOESPROC) (GLbyte x);&#10;typedef void ( * PFNGLVERTEX2BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLVERTEX3BOESPROC) (GLbyte x, GLbyte y);&#10;typedef void ( * PFNGLVERTEX3BVOESPROC) (const GLbyte *coords);&#10;typedef void ( * PFNGLVERTEX4BOESPROC) (GLbyte x, GLbyte y, GLbyte z);&#10;typedef void ( * PFNGLVERTEX4BVOESPROC) (const GLbyte *coords);&#10;# 4479 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLint GLfixed;&#10;&#10;typedef void ( * PFNGLALPHAFUNCXOESPROC) (GLenum func, GLfixed ref);&#10;typedef void ( * PFNGLCLEARCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);&#10;typedef void ( * PFNGLCLEARDEPTHXOESPROC) (GLfixed depth);&#10;typedef void ( * PFNGLCLIPPLANEXOESPROC) (GLenum plane, const GLfixed *equation);&#10;typedef void ( * PFNGLCOLOR4XOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);&#10;typedef void ( * PFNGLDEPTHRANGEXOESPROC) (GLfixed n, GLfixed f);&#10;typedef void ( * PFNGLFOGXOESPROC) (GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLFOGXVOESPROC) (GLenum pname, const GLfixed *param);&#10;typedef void ( * PFNGLFRUSTUMXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);&#10;typedef void ( * PFNGLGETCLIPPLANEXOESPROC) (GLenum plane, GLfixed *equation);&#10;typedef void ( * PFNGLGETFIXEDVOESPROC) (GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETTEXENVXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLLIGHTMODELXOESPROC) (GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLLIGHTMODELXVOESPROC) (GLenum pname, const GLfixed *param);&#10;typedef void ( * PFNGLLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLLIGHTXVOESPROC) (GLenum light, GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLLINEWIDTHXOESPROC) (GLfixed width);&#10;typedef void ( * PFNGLLOADMATRIXXOESPROC) (const GLfixed *m);&#10;typedef void ( * PFNGLMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLMATERIALXVOESPROC) (GLenum face, GLenum pname, const GLfixed *param);&#10;typedef void ( * PFNGLMULTMATRIXXOESPROC) (const GLfixed *m);&#10;typedef void ( * PFNGLMULTITEXCOORD4XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r, GLfixed q);&#10;typedef void ( * PFNGLNORMAL3XOESPROC) (GLfixed nx, GLfixed ny, GLfixed nz);&#10;typedef void ( * PFNGLORTHOXOESPROC) (GLfixed l, GLfixed r, GLfixed b, GLfixed t, GLfixed n, GLfixed f);&#10;typedef void ( * PFNGLPOINTPARAMETERXVOESPROC) (GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLPOINTSIZEXOESPROC) (GLfixed size);&#10;typedef void ( * PFNGLPOLYGONOFFSETXOESPROC) (GLfixed factor, GLfixed units);&#10;typedef void ( * PFNGLROTATEXOESPROC) (GLfixed angle, GLfixed x, GLfixed y, GLfixed z);&#10;typedef void ( * PFNGLSAMPLECOVERAGEOESPROC) (GLfixed value, GLboolean invert);&#10;typedef void ( * PFNGLSCALEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);&#10;typedef void ( * PFNGLTEXENVXOESPROC) (GLenum target, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLTEXENVXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLTEXPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLTEXPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLTRANSLATEXOESPROC) (GLfixed x, GLfixed y, GLfixed z);&#10;typedef void ( * PFNGLACCUMXOESPROC) (GLenum op, GLfixed value);&#10;typedef void ( * PFNGLBITMAPXOESPROC) (GLsizei width, GLsizei height, GLfixed xorig, GLfixed yorig, GLfixed xmove, GLfixed ymove, const GLubyte *bitmap);&#10;typedef void ( * PFNGLBLENDCOLORXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);&#10;typedef void ( * PFNGLCLEARACCUMXOESPROC) (GLfixed red, GLfixed green, GLfixed blue, GLfixed alpha);&#10;typedef void ( * PFNGLCOLOR3XOESPROC) (GLfixed red, GLfixed green, GLfixed blue);&#10;typedef void ( * PFNGLCOLOR3XVOESPROC) (const GLfixed *components);&#10;typedef void ( * PFNGLCOLOR4XVOESPROC) (const GLfixed *components);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERXOESPROC) (GLenum target, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLEVALCOORD1XOESPROC) (GLfixed u);&#10;typedef void ( * PFNGLEVALCOORD1XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLEVALCOORD2XOESPROC) (GLfixed u, GLfixed v);&#10;typedef void ( * PFNGLEVALCOORD2XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLFEEDBACKBUFFERXOESPROC) (GLsizei n, GLenum type, const GLfixed *buffer);&#10;typedef void ( * PFNGLGETCONVOLUTIONPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETHISTOGRAMPARAMETERXVOESPROC) (GLenum target, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETLIGHTXOESPROC) (GLenum light, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETMAPXVOESPROC) (GLenum target, GLenum query, GLfixed *v);&#10;typedef void ( * PFNGLGETMATERIALXOESPROC) (GLenum face, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLGETPIXELMAPXVPROC) (GLenum map, GLint size, GLfixed *values);&#10;typedef void ( * PFNGLGETTEXGENXVOESPROC) (GLenum coord, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLGETTEXLEVELPARAMETERXVOESPROC) (GLenum target, GLint level, GLenum pname, GLfixed *params);&#10;typedef void ( * PFNGLINDEXXOESPROC) (GLfixed component);&#10;typedef void ( * PFNGLINDEXXVOESPROC) (const GLfixed *component);&#10;typedef void ( * PFNGLLOADTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);&#10;typedef void ( * PFNGLMAP1XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint stride, GLint order, GLfixed points);&#10;typedef void ( * PFNGLMAP2XOESPROC) (GLenum target, GLfixed u1, GLfixed u2, GLint ustride, GLint uorder, GLfixed v1, GLfixed v2, GLint vstride, GLint vorder, GLfixed points);&#10;typedef void ( * PFNGLMAPGRID1XOESPROC) (GLint n, GLfixed u1, GLfixed u2);&#10;typedef void ( * PFNGLMAPGRID2XOESPROC) (GLint n, GLfixed u1, GLfixed u2, GLfixed v1, GLfixed v2);&#10;typedef void ( * PFNGLMULTTRANSPOSEMATRIXXOESPROC) (const GLfixed *m);&#10;typedef void ( * PFNGLMULTITEXCOORD1XOESPROC) (GLenum texture, GLfixed s);&#10;typedef void ( * PFNGLMULTITEXCOORD1XVOESPROC) (GLenum texture, const GLfixed *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD2XOESPROC) (GLenum texture, GLfixed s, GLfixed t);&#10;typedef void ( * PFNGLMULTITEXCOORD2XVOESPROC) (GLenum texture, const GLfixed *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD3XOESPROC) (GLenum texture, GLfixed s, GLfixed t, GLfixed r);&#10;typedef void ( * PFNGLMULTITEXCOORD3XVOESPROC) (GLenum texture, const GLfixed *coords);&#10;typedef void ( * PFNGLMULTITEXCOORD4XVOESPROC) (GLenum texture, const GLfixed *coords);&#10;typedef void ( * PFNGLNORMAL3XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLPASSTHROUGHXOESPROC) (GLfixed token);&#10;typedef void ( * PFNGLPIXELMAPXPROC) (GLenum map, GLint size, const GLfixed *values);&#10;typedef void ( * PFNGLPIXELSTOREXPROC) (GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLPIXELTRANSFERXOESPROC) (GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLPIXELZOOMXOESPROC) (GLfixed xfactor, GLfixed yfactor);&#10;typedef void ( * PFNGLPRIORITIZETEXTURESXOESPROC) (GLsizei n, const GLuint *textures, const GLfixed *priorities);&#10;typedef void ( * PFNGLRASTERPOS2XOESPROC) (GLfixed x, GLfixed y);&#10;typedef void ( * PFNGLRASTERPOS2XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLRASTERPOS3XOESPROC) (GLfixed x, GLfixed y, GLfixed z);&#10;typedef void ( * PFNGLRASTERPOS3XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLRASTERPOS4XOESPROC) (GLfixed x, GLfixed y, GLfixed z, GLfixed w);&#10;typedef void ( * PFNGLRASTERPOS4XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLRECTXOESPROC) (GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2);&#10;typedef void ( * PFNGLRECTXVOESPROC) (const GLfixed *v1, const GLfixed *v2);&#10;typedef void ( * PFNGLTEXCOORD1XOESPROC) (GLfixed s);&#10;typedef void ( * PFNGLTEXCOORD1XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLTEXCOORD2XOESPROC) (GLfixed s, GLfixed t);&#10;typedef void ( * PFNGLTEXCOORD2XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLTEXCOORD3XOESPROC) (GLfixed s, GLfixed t, GLfixed r);&#10;typedef void ( * PFNGLTEXCOORD3XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLTEXCOORD4XOESPROC) (GLfixed s, GLfixed t, GLfixed r, GLfixed q);&#10;typedef void ( * PFNGLTEXCOORD4XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLTEXGENXOESPROC) (GLenum coord, GLenum pname, GLfixed param);&#10;typedef void ( * PFNGLTEXGENXVOESPROC) (GLenum coord, GLenum pname, const GLfixed *params);&#10;typedef void ( * PFNGLVERTEX2XOESPROC) (GLfixed x);&#10;typedef void ( * PFNGLVERTEX2XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLVERTEX3XOESPROC) (GLfixed x, GLfixed y);&#10;typedef void ( * PFNGLVERTEX3XVOESPROC) (const GLfixed *coords);&#10;typedef void ( * PFNGLVERTEX4XOESPROC) (GLfixed x, GLfixed y, GLfixed z);&#10;typedef void ( * PFNGLVERTEX4XVOESPROC) (const GLfixed *coords);&#10;# 4695 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLbitfield ( * PFNGLQUERYMATRIXXOESPROC) (GLfixed *mantissa, GLint *exponent);&#10;# 4709 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCLEARDEPTHFOESPROC) (GLclampf depth);&#10;typedef void ( * PFNGLCLIPPLANEFOESPROC) (GLenum plane, const GLfloat *equation);&#10;typedef void ( * PFNGLDEPTHRANGEFOESPROC) (GLclampf n, GLclampf f);&#10;typedef void ( * PFNGLFRUSTUMFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);&#10;typedef void ( * PFNGLGETCLIPPLANEFOESPROC) (GLenum plane, GLfloat *equation);&#10;typedef void ( * PFNGLORTHOFOESPROC) (GLfloat l, GLfloat r, GLfloat b, GLfloat t, GLfloat n, GLfloat f);&#10;# 4735 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTBUFFERMASK3DFXPROC) (GLuint mask);&#10;# 4759 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);&#10;# 4774 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDEBUGMESSAGEENABLEAMDPROC) (GLenum category, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);&#10;typedef void ( * PFNGLDEBUGMESSAGEINSERTAMDPROC) (GLenum category, GLenum severity, GLuint id, GLsizei length, const GLchar *buf);&#10;typedef void ( * PFNGLDEBUGMESSAGECALLBACKAMDPROC) (GLDEBUGPROCAMD callback, void *userParam);&#10;typedef GLuint ( * PFNGLGETDEBUGMESSAGELOGAMDPROC) (GLuint count, GLsizei bufsize, GLenum *categories, GLuint *severities, GLuint *ids, GLsizei *lengths, GLchar *message);&#10;# 4794 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDFUNCINDEXEDAMDPROC) (GLuint buf, GLenum src, GLenum dst);&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);&#10;typedef void ( * PFNGLBLENDEQUATIONINDEXEDAMDPROC) (GLuint buf, GLenum mode);&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha);&#10;# 4810 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBPARAMETERIAMDPROC) (GLuint index, GLenum pname, GLint param);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC) (GLenum mode, const void *indirect, GLsizei primcount, GLsizei stride);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei primcount, GLsizei stride);&#10;# 4833 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGENNAMESAMDPROC) (GLenum identifier, GLuint num, GLuint *names);&#10;typedef void ( * PFNGLDELETENAMESAMDPROC) (GLenum identifier, GLuint num, const GLuint *names);&#10;typedef GLboolean ( * PFNGLISNAMEAMDPROC) (GLenum identifier, GLuint name);&#10;# 4851 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLQUERYOBJECTPARAMETERUIAMDPROC) (GLenum target, GLuint id, GLenum pname, GLuint param);&#10;# 4866 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETPERFMONITORGROUPSAMDPROC) (GLint *numGroups, GLsizei groupsSize, GLuint *groups);&#10;typedef void ( * PFNGLGETPERFMONITORCOUNTERSAMDPROC) (GLuint group, GLint *numCounters, GLint *maxActiveCounters, GLsizei counterSize, GLuint *counters);&#10;typedef void ( * PFNGLGETPERFMONITORGROUPSTRINGAMDPROC) (GLuint group, GLsizei bufSize, GLsizei *length, GLchar *groupString);&#10;typedef void ( * PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC) (GLuint group, GLuint counter, GLsizei bufSize, GLsizei *length, GLchar *counterString);&#10;typedef void ( * PFNGLGETPERFMONITORCOUNTERINFOAMDPROC) (GLuint group, GLuint counter, GLenum pname, void *data);&#10;typedef void ( * PFNGLGENPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);&#10;typedef void ( * PFNGLDELETEPERFMONITORSAMDPROC) (GLsizei n, GLuint *monitors);&#10;typedef void ( * PFNGLSELECTPERFMONITORCOUNTERSAMDPROC) (GLuint monitor, GLboolean enable, GLuint group, GLint numCounters, GLuint *counterList);&#10;typedef void ( * PFNGLBEGINPERFMONITORAMDPROC) (GLuint monitor);&#10;typedef void ( * PFNGLENDPERFMONITORAMDPROC) (GLuint monitor);&#10;typedef void ( * PFNGLGETPERFMONITORCOUNTERDATAAMDPROC) (GLuint monitor, GLenum pname, GLsizei dataSize, GLuint *data, GLint *bytesWritten);&#10;# 4907 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSETMULTISAMPLEFVAMDPROC) (GLenum pname, GLuint index, const GLfloat *val);&#10;# 4940 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXSTORAGESPARSEAMDPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);&#10;typedef void ( * PFNGLTEXTURESTORAGESPARSEAMDPROC) (GLuint texture, GLenum target, GLenum internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLsizei layers, GLbitfield flags);&#10;# 4954 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSTENCILOPVALUEAMDPROC) (GLenum face, GLuint value);&#10;# 4981 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTESSELLATIONFACTORAMDPROC) (GLfloat factor);&#10;typedef void ( * PFNGLTESSELLATIONMODEAMDPROC) (GLenum mode);&#10;# 5008 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLELEMENTPOINTERAPPLEPROC) (GLenum type, const void *pointer);&#10;typedef void ( * PFNGLDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, GLint first, GLsizei count);&#10;typedef void ( * PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, GLint first, GLsizei count);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);&#10;typedef void ( * PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC) (GLenum mode, GLuint start, GLuint end, const GLint *first, const GLsizei *count, GLsizei primcount);&#10;# 5026 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGENFENCESAPPLEPROC) (GLsizei n, GLuint *fences);&#10;typedef void ( * PFNGLDELETEFENCESAPPLEPROC) (GLsizei n, const GLuint *fences);&#10;typedef void ( * PFNGLSETFENCEAPPLEPROC) (GLuint fence);&#10;typedef GLboolean ( * PFNGLISFENCEAPPLEPROC) (GLuint fence);&#10;typedef GLboolean ( * PFNGLTESTFENCEAPPLEPROC) (GLuint fence);&#10;typedef void ( * PFNGLFINISHFENCEAPPLEPROC) (GLuint fence);&#10;typedef GLboolean ( * PFNGLTESTOBJECTAPPLEPROC) (GLenum object, GLuint name);&#10;typedef void ( * PFNGLFINISHOBJECTAPPLEPROC) (GLenum object, GLint name);&#10;# 5068 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBUFFERPARAMETERIAPPLEPROC) (GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC) (GLenum target, GLintptr offset, GLsizeiptr size);&#10;# 5084 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLenum ( * PFNGLOBJECTPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);&#10;typedef GLenum ( * PFNGLOBJECTUNPURGEABLEAPPLEPROC) (GLenum objectType, GLuint name, GLenum option);&#10;typedef void ( * PFNGLGETOBJECTPARAMETERIVAPPLEPROC) (GLenum objectType, GLuint name, GLenum pname, GLint *params);&#10;# 5121 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXTURERANGEAPPLEPROC) (GLenum target, GLsizei length, const void *pointer);&#10;typedef void ( * PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC) (GLenum target, GLenum pname, void **params);&#10;# 5137 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDVERTEXARRAYAPPLEPROC) (GLuint array);&#10;typedef void ( * PFNGLDELETEVERTEXARRAYSAPPLEPROC) (GLsizei n, const GLuint *arrays);&#10;typedef void ( * PFNGLGENVERTEXARRAYSAPPLEPROC) (GLsizei n, GLuint *arrays);&#10;typedef GLboolean ( * PFNGLISVERTEXARRAYAPPLEPROC) (GLuint array);&#10;# 5156 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);&#10;typedef void ( * PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC) (GLsizei length, void *pointer);&#10;typedef void ( * PFNGLVERTEXARRAYPARAMETERIAPPLEPROC) (GLenum pname, GLint param);&#10;# 5178 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLENABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);&#10;typedef void ( * PFNGLDISABLEVERTEXATTRIBAPPLEPROC) (GLuint index, GLenum pname);&#10;typedef GLboolean ( * PFNGLISVERTEXATTRIBENABLEDAPPLEPROC) (GLuint index, GLenum pname);&#10;typedef void ( * PFNGLMAPVERTEXATTRIB1DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint stride, GLint order, const GLdouble *points);&#10;typedef void ( * PFNGLMAPVERTEXATTRIB1FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint stride, GLint order, const GLfloat *points);&#10;typedef void ( * PFNGLMAPVERTEXATTRIB2DAPPLEPROC) (GLuint index, GLuint size, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, const GLdouble *points);&#10;typedef void ( * PFNGLMAPVERTEXATTRIB2FAPPLEPROC) (GLuint index, GLuint size, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, const GLfloat *points);&#10;# 5220 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWBUFFERSATIPROC) (GLsizei n, const GLenum *bufs);&#10;# 5231 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLELEMENTPOINTERATIPROC) (GLenum type, const void *pointer);&#10;typedef void ( * PFNGLDRAWELEMENTARRAYATIPROC) (GLenum mode, GLsizei count);&#10;typedef void ( * PFNGLDRAWRANGEELEMENTARRAYATIPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count);&#10;# 5251 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXBUMPPARAMETERIVATIPROC) (GLenum pname, const GLint *param);&#10;typedef void ( * PFNGLTEXBUMPPARAMETERFVATIPROC) (GLenum pname, const GLfloat *param);&#10;typedef void ( * PFNGLGETTEXBUMPPARAMETERIVATIPROC) (GLenum pname, GLint *param);&#10;typedef void ( * PFNGLGETTEXBUMPPARAMETERFVATIPROC) (GLenum pname, GLfloat *param);&#10;# 5369 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLuint ( * PFNGLGENFRAGMENTSHADERSATIPROC) (GLuint range);&#10;typedef void ( * PFNGLBINDFRAGMENTSHADERATIPROC) (GLuint id);&#10;typedef void ( * PFNGLDELETEFRAGMENTSHADERATIPROC) (GLuint id);&#10;typedef void ( * PFNGLBEGINFRAGMENTSHADERATIPROC) (void);&#10;typedef void ( * PFNGLENDFRAGMENTSHADERATIPROC) (void);&#10;typedef void ( * PFNGLPASSTEXCOORDATIPROC) (GLuint dst, GLuint coord, GLenum swizzle);&#10;typedef void ( * PFNGLSAMPLEMAPATIPROC) (GLuint dst, GLuint interp, GLenum swizzle);&#10;typedef void ( * PFNGLCOLORFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);&#10;typedef void ( * PFNGLCOLORFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);&#10;typedef void ( * PFNGLCOLORFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMask, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);&#10;typedef void ( * PFNGLALPHAFRAGMENTOP1ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod);&#10;typedef void ( * PFNGLALPHAFRAGMENTOP2ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod);&#10;typedef void ( * PFNGLALPHAFRAGMENTOP3ATIPROC) (GLenum op, GLuint dst, GLuint dstMod, GLuint arg1, GLuint arg1Rep, GLuint arg1Mod, GLuint arg2, GLuint arg2Rep, GLuint arg2Mod, GLuint arg3, GLuint arg3Rep, GLuint arg3Mod);&#10;typedef void ( * PFNGLSETFRAGMENTSHADERCONSTANTATIPROC) (GLuint dst, const GLfloat *value);&#10;# 5403 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void *( * PFNGLMAPOBJECTBUFFERATIPROC) (GLuint buffer);&#10;typedef void ( * PFNGLUNMAPOBJECTBUFFERATIPROC) (GLuint buffer);&#10;# 5435 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPNTRIANGLESIATIPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLPNTRIANGLESFATIPROC) (GLenum pname, GLfloat param);&#10;# 5449 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSTENCILOPSEPARATEATIPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);&#10;typedef void ( * PFNGLSTENCILFUNCSEPARATEATIPROC) (GLenum frontfunc, GLenum backfunc, GLint ref, GLuint mask);&#10;# 5501 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLuint ( * PFNGLNEWOBJECTBUFFERATIPROC) (GLsizei size, const void *pointer, GLenum usage);&#10;typedef GLboolean ( * PFNGLISOBJECTBUFFERATIPROC) (GLuint buffer);&#10;typedef void ( * PFNGLUPDATEOBJECTBUFFERATIPROC) (GLuint buffer, GLuint offset, GLsizei size, const void *pointer, GLenum preserve);&#10;typedef void ( * PFNGLGETOBJECTBUFFERFVATIPROC) (GLuint buffer, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETOBJECTBUFFERIVATIPROC) (GLuint buffer, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLFREEOBJECTBUFFERATIPROC) (GLuint buffer);&#10;typedef void ( * PFNGLARRAYOBJECTATIPROC) (GLenum array, GLint size, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);&#10;typedef void ( * PFNGLGETARRAYOBJECTFVATIPROC) (GLenum array, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETARRAYOBJECTIVATIPROC) (GLenum array, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLVARIANTARRAYOBJECTATIPROC) (GLuint id, GLenum type, GLsizei stride, GLuint buffer, GLuint offset);&#10;typedef void ( * PFNGLGETVARIANTARRAYOBJECTFVATIPROC) (GLuint id, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVARIANTARRAYOBJECTIVATIPROC) (GLuint id, GLenum pname, GLint *params);&#10;# 5531 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBARRAYOBJECTATIPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLuint buffer, GLuint offset);&#10;typedef void ( * PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC) (GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC) (GLuint index, GLenum pname, GLint *params);&#10;# 5553 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXSTREAM1SATIPROC) (GLenum stream, GLshort x);&#10;typedef void ( * PFNGLVERTEXSTREAM1SVATIPROC) (GLenum stream, const GLshort *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM1IATIPROC) (GLenum stream, GLint x);&#10;typedef void ( * PFNGLVERTEXSTREAM1IVATIPROC) (GLenum stream, const GLint *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM1FATIPROC) (GLenum stream, GLfloat x);&#10;typedef void ( * PFNGLVERTEXSTREAM1FVATIPROC) (GLenum stream, const GLfloat *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM1DATIPROC) (GLenum stream, GLdouble x);&#10;typedef void ( * PFNGLVERTEXSTREAM1DVATIPROC) (GLenum stream, const GLdouble *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM2SATIPROC) (GLenum stream, GLshort x, GLshort y);&#10;typedef void ( * PFNGLVERTEXSTREAM2SVATIPROC) (GLenum stream, const GLshort *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM2IATIPROC) (GLenum stream, GLint x, GLint y);&#10;typedef void ( * PFNGLVERTEXSTREAM2IVATIPROC) (GLenum stream, const GLint *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM2FATIPROC) (GLenum stream, GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLVERTEXSTREAM2FVATIPROC) (GLenum stream, const GLfloat *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM2DATIPROC) (GLenum stream, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXSTREAM2DVATIPROC) (GLenum stream, const GLdouble *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM3SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLVERTEXSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM3IATIPROC) (GLenum stream, GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLVERTEXSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM3FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLVERTEXSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM3DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM4SATIPROC) (GLenum stream, GLshort x, GLshort y, GLshort z, GLshort w);&#10;typedef void ( * PFNGLVERTEXSTREAM4SVATIPROC) (GLenum stream, const GLshort *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM4IATIPROC) (GLenum stream, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLVERTEXSTREAM4IVATIPROC) (GLenum stream, const GLint *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM4FATIPROC) (GLenum stream, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLVERTEXSTREAM4FVATIPROC) (GLenum stream, const GLfloat *coords);&#10;typedef void ( * PFNGLVERTEXSTREAM4DATIPROC) (GLenum stream, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXSTREAM4DVATIPROC) (GLenum stream, const GLdouble *coords);&#10;typedef void ( * PFNGLNORMALSTREAM3BATIPROC) (GLenum stream, GLbyte nx, GLbyte ny, GLbyte nz);&#10;typedef void ( * PFNGLNORMALSTREAM3BVATIPROC) (GLenum stream, const GLbyte *coords);&#10;typedef void ( * PFNGLNORMALSTREAM3SATIPROC) (GLenum stream, GLshort nx, GLshort ny, GLshort nz);&#10;typedef void ( * PFNGLNORMALSTREAM3SVATIPROC) (GLenum stream, const GLshort *coords);&#10;typedef void ( * PFNGLNORMALSTREAM3IATIPROC) (GLenum stream, GLint nx, GLint ny, GLint nz);&#10;typedef void ( * PFNGLNORMALSTREAM3IVATIPROC) (GLenum stream, const GLint *coords);&#10;typedef void ( * PFNGLNORMALSTREAM3FATIPROC) (GLenum stream, GLfloat nx, GLfloat ny, GLfloat nz);&#10;typedef void ( * PFNGLNORMALSTREAM3FVATIPROC) (GLenum stream, const GLfloat *coords);&#10;typedef void ( * PFNGLNORMALSTREAM3DATIPROC) (GLenum stream, GLdouble nx, GLdouble ny, GLdouble nz);&#10;typedef void ( * PFNGLNORMALSTREAM3DVATIPROC) (GLenum stream, const GLdouble *coords);&#10;typedef void ( * PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC) (GLenum stream);&#10;typedef void ( * PFNGLVERTEXBLENDENVIATIPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLVERTEXBLENDENVFATIPROC) (GLenum pname, GLfloat param);&#10;# 5674 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLUNIFORMBUFFEREXTPROC) (GLuint program, GLint location, GLuint buffer);&#10;typedef GLint ( * PFNGLGETUNIFORMBUFFERSIZEEXTPROC) (GLuint program, GLint location);&#10;typedef GLintptr ( * PFNGLGETUNIFORMOFFSETEXTPROC) (GLuint program, GLint location);&#10;# 5691 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDCOLOREXTPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);&#10;# 5701 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEEXTPROC) (GLenum modeRGB, GLenum modeAlpha);&#10;# 5713 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEEXTPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);&#10;# 5729 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDEQUATIONEXTPROC) (GLenum mode);&#10;# 5756 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLsizei count, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLCOPYCOLORSUBTABLEEXTPROC) (GLenum target, GLsizei start, GLint x, GLint y, GLsizei width);&#10;# 5768 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLLOCKARRAYSEXTPROC) (GLint first, GLsizei count);&#10;typedef void ( * PFNGLUNLOCKARRAYSEXTPROC) (void);&#10;# 5798 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *image);&#10;typedef void ( * PFNGLCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *image);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat params);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint params);&#10;typedef void ( * PFNGLCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);&#10;typedef void ( * PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETCONVOLUTIONFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *image);&#10;typedef void ( * PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETSEPARABLEFILTEREXTPROC) (GLenum target, GLenum format, GLenum type, void *row, void *column, void *span);&#10;typedef void ( * PFNGLSEPARABLEFILTER2DEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *row, const void *column);&#10;# 5844 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTANGENT3BEXTPROC) (GLbyte tx, GLbyte ty, GLbyte tz);&#10;typedef void ( * PFNGLTANGENT3BVEXTPROC) (const GLbyte *v);&#10;typedef void ( * PFNGLTANGENT3DEXTPROC) (GLdouble tx, GLdouble ty, GLdouble tz);&#10;typedef void ( * PFNGLTANGENT3DVEXTPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLTANGENT3FEXTPROC) (GLfloat tx, GLfloat ty, GLfloat tz);&#10;typedef void ( * PFNGLTANGENT3FVEXTPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLTANGENT3IEXTPROC) (GLint tx, GLint ty, GLint tz);&#10;typedef void ( * PFNGLTANGENT3IVEXTPROC) (const GLint *v);&#10;typedef void ( * PFNGLTANGENT3SEXTPROC) (GLshort tx, GLshort ty, GLshort tz);&#10;typedef void ( * PFNGLTANGENT3SVEXTPROC) (const GLshort *v);&#10;typedef void ( * PFNGLBINORMAL3BEXTPROC) (GLbyte bx, GLbyte by, GLbyte bz);&#10;typedef void ( * PFNGLBINORMAL3BVEXTPROC) (const GLbyte *v);&#10;typedef void ( * PFNGLBINORMAL3DEXTPROC) (GLdouble bx, GLdouble by, GLdouble bz);&#10;typedef void ( * PFNGLBINORMAL3DVEXTPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLBINORMAL3FEXTPROC) (GLfloat bx, GLfloat by, GLfloat bz);&#10;typedef void ( * PFNGLBINORMAL3FVEXTPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLBINORMAL3IEXTPROC) (GLint bx, GLint by, GLint bz);&#10;typedef void ( * PFNGLBINORMAL3IVEXTPROC) (const GLint *v);&#10;typedef void ( * PFNGLBINORMAL3SEXTPROC) (GLshort bx, GLshort by, GLshort bz);&#10;typedef void ( * PFNGLBINORMAL3SVEXTPROC) (const GLshort *v);&#10;typedef void ( * PFNGLTANGENTPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLBINORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);&#10;# 5894 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOPYTEXIMAGE1DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);&#10;typedef void ( * PFNGLCOPYTEXIMAGE2DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);&#10;typedef void ( * PFNGLCOPYTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);&#10;typedef void ( * PFNGLCOPYTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLCOPYTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;# 5913 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCULLPARAMETERDVEXTPROC) (GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLCULLPARAMETERFVEXTPROC) (GLenum pname, GLfloat *params);&#10;# 5929 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLLABELOBJECTEXTPROC) (GLenum type, GLuint object, GLsizei length, const GLchar *label);&#10;typedef void ( * PFNGLGETOBJECTLABELEXTPROC) (GLenum type, GLuint object, GLsizei bufSize, GLsizei *length, GLchar *label);&#10;# 5939 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLINSERTEVENTMARKEREXTPROC) (GLsizei length, const GLchar *marker);&#10;typedef void ( * PFNGLPUSHGROUPMARKEREXTPROC) (GLsizei length, const GLchar *marker);&#10;typedef void ( * PFNGLPOPGROUPMARKEREXTPROC) (void);&#10;# 5953 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDEPTHBOUNDSEXTPROC) (GLclampd zmin, GLclampd zmax);&#10;# 5964 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMATRIXLOADFEXTPROC) (GLenum mode, const GLfloat *m);&#10;typedef void ( * PFNGLMATRIXLOADDEXTPROC) (GLenum mode, const GLdouble *m);&#10;typedef void ( * PFNGLMATRIXMULTFEXTPROC) (GLenum mode, const GLfloat *m);&#10;typedef void ( * PFNGLMATRIXMULTDEXTPROC) (GLenum mode, const GLdouble *m);&#10;typedef void ( * PFNGLMATRIXLOADIDENTITYEXTPROC) (GLenum mode);&#10;typedef void ( * PFNGLMATRIXROTATEFEXTPROC) (GLenum mode, GLfloat angle, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLMATRIXROTATEDEXTPROC) (GLenum mode, GLdouble angle, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLMATRIXSCALEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLMATRIXSCALEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLMATRIXTRANSLATEFEXTPROC) (GLenum mode, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLMATRIXTRANSLATEDEXTPROC) (GLenum mode, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLMATRIXFRUSTUMEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);&#10;typedef void ( * PFNGLMATRIXORTHOEXTPROC) (GLenum mode, GLdouble left, GLdouble right, GLdouble bottom, GLdouble top, GLdouble zNear, GLdouble zFar);&#10;typedef void ( * PFNGLMATRIXPOPEXTPROC) (GLenum mode);&#10;typedef void ( * PFNGLMATRIXPUSHEXTPROC) (GLenum mode);&#10;typedef void ( * PFNGLCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);&#10;typedef void ( * PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC) (GLbitfield mask);&#10;typedef void ( * PFNGLTEXTUREPARAMETERFEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLTEXTUREPARAMETERIEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLCOPYTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);&#10;typedef void ( * PFNGLCOPYTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);&#10;typedef void ( * PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);&#10;typedef void ( * PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);&#10;typedef void ( * PFNGLGETTEXTUREPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETTEXTUREPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLBINDMULTITEXTUREEXTPROC) (GLenum texunit, GLenum target, GLuint texture);&#10;typedef void ( * PFNGLMULTITEXCOORDPOINTEREXTPROC) (GLenum texunit, GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLMULTITEXENVFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLMULTITEXENVIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLMULTITEXGENDEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble param);&#10;typedef void ( * PFNGLMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLdouble *params);&#10;typedef void ( * PFNGLMULTITEXGENFEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLMULTITEXGENIEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint param);&#10;typedef void ( * PFNGLMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLGETMULTITEXENVFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMULTITEXENVIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMULTITEXGENDVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLGETMULTITEXGENFVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMULTITEXGENIVEXTPROC) (GLenum texunit, GLenum coord, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLMULTITEXPARAMETERIEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLMULTITEXPARAMETERFEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLCOPYMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);&#10;typedef void ( * PFNGLCOPYMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);&#10;typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);&#10;typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum format, GLenum type, void *pixels);&#10;typedef void ( * PFNGLGETMULTITEXPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMULTITEXPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLENABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);&#10;typedef void ( * PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC) (GLenum array, GLuint index);&#10;typedef void ( * PFNGLGETFLOATINDEXEDVEXTPROC) (GLenum target, GLuint index, GLfloat *data);&#10;typedef void ( * PFNGLGETDOUBLEINDEXEDVEXTPROC) (GLenum target, GLuint index, GLdouble *data);&#10;typedef void ( * PFNGLGETPOINTERINDEXEDVEXTPROC) (GLenum target, GLuint index, void **data);&#10;typedef void ( * PFNGLENABLEINDEXEDEXTPROC) (GLenum target, GLuint index);&#10;typedef void ( * PFNGLDISABLEINDEXEDEXTPROC) (GLenum target, GLuint index);&#10;typedef GLboolean ( * PFNGLISENABLEDINDEXEDEXTPROC) (GLenum target, GLuint index);&#10;typedef void ( * PFNGLGETINTEGERINDEXEDVEXTPROC) (GLenum target, GLuint index, GLint *data);&#10;typedef void ( * PFNGLGETBOOLEANINDEXEDVEXTPROC) (GLenum target, GLuint index, GLboolean *data);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC) (GLuint texture, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC) (GLuint texture, GLenum target, GLint lod, void *img);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC) (GLenum texunit, GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *bits);&#10;typedef void ( * PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC) (GLenum texunit, GLenum target, GLint lod, void *img);&#10;typedef void ( * PFNGLMATRIXLOADTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);&#10;typedef void ( * PFNGLMATRIXLOADTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);&#10;typedef void ( * PFNGLMATRIXMULTTRANSPOSEFEXTPROC) (GLenum mode, const GLfloat *m);&#10;typedef void ( * PFNGLMATRIXMULTTRANSPOSEDEXTPROC) (GLenum mode, const GLdouble *m);&#10;typedef void ( * PFNGLNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);&#10;typedef void ( * PFNGLNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);&#10;typedef void *( * PFNGLMAPNAMEDBUFFEREXTPROC) (GLuint buffer, GLenum access);&#10;typedef GLboolean ( * PFNGLUNMAPNAMEDBUFFEREXTPROC) (GLuint buffer);&#10;typedef void ( * PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC) (GLuint buffer, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETNAMEDBUFFERPOINTERVEXTPROC) (GLuint buffer, GLenum pname, void **params);&#10;typedef void ( * PFNGLGETNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1FEXTPROC) (GLuint program, GLint location, GLfloat v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4FEXTPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1IEXTPROC) (GLuint program, GLint location, GLint v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4IEXTPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4FVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4IVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);&#10;typedef void ( * PFNGLTEXTUREBUFFEREXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer);&#10;typedef void ( * PFNGLMULTITEXBUFFEREXTPROC) (GLenum texunit, GLenum target, GLenum internalformat, GLuint buffer);&#10;typedef void ( * PFNGLTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, const GLuint *params);&#10;typedef void ( * PFNGLGETTEXTUREPARAMETERIIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETTEXTUREPARAMETERIUIVEXTPROC) (GLuint texture, GLenum target, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, const GLuint *params);&#10;typedef void ( * PFNGLGETMULTITEXPARAMETERIIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMULTITEXPARAMETERIUIVEXTPROC) (GLenum texunit, GLenum target, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UIEXTPROC) (GLuint program, GLint location, GLuint v0);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UIEXTPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UIVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLfloat *params);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC) (GLuint program, GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLint *params);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLint *params);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLuint *params);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLsizei count, const GLuint *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLint *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC) (GLuint program, GLenum target, GLuint index, GLuint *params);&#10;typedef void ( * PFNGLENABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);&#10;typedef void ( * PFNGLDISABLECLIENTSTATEIEXTPROC) (GLenum array, GLuint index);&#10;typedef void ( * PFNGLGETFLOATI_VEXTPROC) (GLenum pname, GLuint index, GLfloat *params);&#10;typedef void ( * PFNGLGETDOUBLEI_VEXTPROC) (GLenum pname, GLuint index, GLdouble *params);&#10;typedef void ( * PFNGLGETPOINTERI_VEXTPROC) (GLenum pname, GLuint index, void **params);&#10;typedef void ( * PFNGLNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum format, GLsizei len, const void *string);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLdouble *params);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC) (GLuint program, GLenum target, GLuint index, const GLfloat *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC) (GLuint program, GLenum target, GLuint index, GLdouble *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC) (GLuint program, GLenum target, GLuint index, GLfloat *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMIVEXTPROC) (GLuint program, GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETNAMEDPROGRAMSTRINGEXTPROC) (GLuint program, GLenum target, GLenum pname, void *string);&#10;typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC) (GLuint renderbuffer, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC) (GLuint renderbuffer, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef GLenum ( * PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC) (GLuint framebuffer, GLenum target);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);&#10;typedef void ( * PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGENERATETEXTUREMIPMAPEXTPROC) (GLuint texture, GLenum target);&#10;typedef void ( * PFNGLGENERATEMULTITEXMIPMAPEXTPROC) (GLenum texunit, GLenum target);&#10;typedef void ( * PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);&#10;typedef void ( * PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs);&#10;typedef void ( * PFNGLFRAMEBUFFERREADBUFFEREXTPROC) (GLuint framebuffer, GLenum mode);&#10;typedef void ( * PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLenum face);&#10;typedef void ( * PFNGLTEXTURERENDERBUFFEREXTPROC) (GLuint texture, GLenum target, GLuint renderbuffer);&#10;typedef void ( * PFNGLMULTITEXRENDERBUFFEREXTPROC) (GLenum texunit, GLenum target, GLuint renderbuffer);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYINDEXOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYNORMALOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum texunit, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLENABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);&#10;typedef void ( * PFNGLDISABLEVERTEXARRAYEXTPROC) (GLuint vaobj, GLenum array);&#10;typedef void ( * PFNGLENABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);&#10;typedef void ( * PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC) (GLuint vaobj, GLuint index);&#10;typedef void ( * PFNGLGETVERTEXARRAYINTEGERVEXTPROC) (GLuint vaobj, GLenum pname, GLint *param);&#10;typedef void ( * PFNGLGETVERTEXARRAYPOINTERVEXTPROC) (GLuint vaobj, GLenum pname, void **param);&#10;typedef void ( * PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param);&#10;typedef void ( * PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC) (GLuint vaobj, GLuint index, GLenum pname, void **param);&#10;typedef void *( * PFNGLMAPNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access);&#10;typedef void ( * PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length);&#10;typedef void ( * PFNGLNAMEDBUFFERSTORAGEEXTPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);&#10;typedef void ( * PFNGLCLEARNAMEDBUFFERDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC) (GLuint buffer, GLenum internalformat, GLsizeiptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);&#10;typedef void ( * PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC) (GLuint framebuffer, GLenum pname, GLint param);&#10;typedef void ( * PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC) (GLuint framebuffer, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1DEXTPROC) (GLuint program, GLint location, GLdouble x);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4DEXTPROC) (GLuint program, GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4DVEXTPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);&#10;typedef void ( * PFNGLTEXTUREBUFFERRANGEEXTPROC) (GLuint texture, GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);&#10;typedef void ( * PFNGLTEXTURESTORAGE1DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);&#10;typedef void ( * PFNGLTEXTURESTORAGE2DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLTEXTURESTORAGE3DEXTPROC) (GLuint texture, GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);&#10;typedef void ( * PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC) (GLuint texture, GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);&#10;typedef void ( * PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC) (GLuint vaobj, GLuint buffer, GLuint index, GLint size, GLenum type, GLsizei stride, GLintptr offset);&#10;typedef void ( * PFNGLTEXTUREPAGECOMMITMENTEXTPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean resident);&#10;typedef void ( * PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC) (GLuint vaobj, GLuint index, GLuint divisor);&#10;# 6480 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORMASKINDEXEDEXTPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLDRAWARRAYSINSTANCEDEXTPROC) (GLenum mode, GLint start, GLsizei count, GLsizei primcount);&#10;typedef void ( * PFNGLDRAWELEMENTSINSTANCEDEXTPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei primcount);&#10;# 6500 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWRANGEELEMENTSEXTPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);&#10;# 6516 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFOGCOORDFEXTPROC) (GLfloat coord);&#10;typedef void ( * PFNGLFOGCOORDFVEXTPROC) (const GLfloat *coord);&#10;typedef void ( * PFNGLFOGCOORDDEXTPROC) (GLdouble coord);&#10;typedef void ( * PFNGLFOGCOORDDVEXTPROC) (const GLdouble *coord);&#10;typedef void ( * PFNGLFOGCOORDPOINTEREXTPROC) (GLenum type, GLsizei stride, const void *pointer);&#10;# 6536 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLITFRAMEBUFFEREXTPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);&#10;# 6547 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);&#10;# 6612 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLboolean ( * PFNGLISRENDERBUFFEREXTPROC) (GLuint renderbuffer);&#10;typedef void ( * PFNGLBINDRENDERBUFFEREXTPROC) (GLenum target, GLuint renderbuffer);&#10;typedef void ( * PFNGLDELETERENDERBUFFERSEXTPROC) (GLsizei n, const GLuint *renderbuffers);&#10;typedef void ( * PFNGLGENRENDERBUFFERSEXTPROC) (GLsizei n, GLuint *renderbuffers);&#10;typedef void ( * PFNGLRENDERBUFFERSTORAGEEXTPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height);&#10;typedef void ( * PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef GLboolean ( * PFNGLISFRAMEBUFFEREXTPROC) (GLuint framebuffer);&#10;typedef void ( * PFNGLBINDFRAMEBUFFEREXTPROC) (GLenum target, GLuint framebuffer);&#10;typedef void ( * PFNGLDELETEFRAMEBUFFERSEXTPROC) (GLsizei n, const GLuint *framebuffers);&#10;typedef void ( * PFNGLGENFRAMEBUFFERSEXTPROC) (GLsizei n, GLuint *framebuffers);&#10;typedef GLenum ( * PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC) (GLenum target);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE1DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE2DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURE3DEXTPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);&#10;typedef void ( * PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);&#10;typedef void ( * PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGENERATEMIPMAPEXTPROC) (GLenum target);&#10;# 6678 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMPARAMETERIEXTPROC) (GLuint program, GLenum pname, GLint value);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *params);&#10;# 6724 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETUNIFORMUIVEXTPROC) (GLuint program, GLint location, GLuint *params);&#10;typedef void ( * PFNGLBINDFRAGDATALOCATIONEXTPROC) (GLuint program, GLuint color, const GLchar *name);&#10;typedef GLint ( * PFNGLGETFRAGDATALOCATIONEXTPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLUNIFORM1UIEXTPROC) (GLint location, GLuint v0);&#10;typedef void ( * PFNGLUNIFORM2UIEXTPROC) (GLint location, GLuint v0, GLuint v1);&#10;typedef void ( * PFNGLUNIFORM3UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2);&#10;typedef void ( * PFNGLUNIFORM4UIEXTPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);&#10;typedef void ( * PFNGLUNIFORM1UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM2UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM3UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);&#10;typedef void ( * PFNGLUNIFORM4UIVEXTPROC) (GLint location, GLsizei count, const GLuint *value);&#10;# 6766 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETHISTOGRAMEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);&#10;typedef void ( * PFNGLGETHISTOGRAMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETHISTOGRAMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMINMAXEXTPROC) (GLenum target, GLboolean reset, GLenum format, GLenum type, void *values);&#10;typedef void ( * PFNGLGETMINMAXPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMINMAXPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLHISTOGRAMEXTPROC) (GLenum target, GLsizei width, GLenum internalformat, GLboolean sink);&#10;typedef void ( * PFNGLMINMAXEXTPROC) (GLenum target, GLenum internalformat, GLboolean sink);&#10;typedef void ( * PFNGLRESETHISTOGRAMEXTPROC) (GLenum target);&#10;typedef void ( * PFNGLRESETMINMAXEXTPROC) (GLenum target);&#10;# 6807 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLINDEXFUNCEXTPROC) (GLenum func, GLclampf ref);&#10;# 6818 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLINDEXMATERIALEXTPROC) (GLenum face, GLenum mode);&#10;# 6839 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLAPPLYTEXTUREEXTPROC) (GLenum mode);&#10;typedef void ( * PFNGLTEXTURELIGHTEXTPROC) (GLenum pname);&#10;typedef void ( * PFNGLTEXTUREMATERIALEXTPROC) (GLenum face, GLenum mode);&#10;# 6855 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMULTIDRAWARRAYSEXTPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei primcount);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSEXTPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount);&#10;# 6882 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSAMPLEMASKEXTPROC) (GLclampf value, GLboolean invert);&#10;typedef void ( * PFNGLSAMPLEPATTERNEXTPROC) (GLenum pattern);&#10;# 6923 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORTABLEEXTPROC) (GLenum target, GLenum internalFormat, GLsizei width, GLenum format, GLenum type, const void *table);&#10;typedef void ( * PFNGLGETCOLORTABLEEXTPROC) (GLenum target, GLenum format, GLenum type, void *data);&#10;typedef void ( * PFNGLGETCOLORTABLEPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETCOLORTABLEPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;# 6954 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPIXELTRANSFORMPARAMETERIEXTPROC) (GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLPIXELTRANSFORMPARAMETERFEXTPROC) (GLenum target, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;# 6980 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPOINTPARAMETERFEXTPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPOINTPARAMETERFVEXTPROC) (GLenum pname, const GLfloat *params);&#10;# 6993 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPOLYGONOFFSETEXTPROC) (GLfloat factor, GLfloat bias);&#10;# 7005 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROVOKINGVERTEXEXTPROC) (GLenum mode);&#10;# 7025 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSECONDARYCOLOR3BEXTPROC) (GLbyte red, GLbyte green, GLbyte blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3BVEXTPROC) (const GLbyte *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3DEXTPROC) (GLdouble red, GLdouble green, GLdouble blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3DVEXTPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3FEXTPROC) (GLfloat red, GLfloat green, GLfloat blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3FVEXTPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3IEXTPROC) (GLint red, GLint green, GLint blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3IVEXTPROC) (const GLint *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3SEXTPROC) (GLshort red, GLshort green, GLshort blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3SVEXTPROC) (const GLshort *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UBEXTPROC) (GLubyte red, GLubyte green, GLubyte blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UBVEXTPROC) (const GLubyte *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UIEXTPROC) (GLuint red, GLuint green, GLuint blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3UIVEXTPROC) (const GLuint *v);&#10;typedef void ( * PFNGLSECONDARYCOLOR3USEXTPROC) (GLushort red, GLushort green, GLushort blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3USVEXTPROC) (const GLushort *v);&#10;typedef void ( * PFNGLSECONDARYCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;# 7066 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLUSESHADERPROGRAMEXTPROC) (GLenum type, GLuint program);&#10;typedef void ( * PFNGLACTIVEPROGRAMEXTPROC) (GLuint program);&#10;typedef GLuint ( * PFNGLCREATESHADERPROGRAMEXTPROC) (GLenum type, const GLchar *string);&#10;# 7144 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDIMAGETEXTUREEXTPROC) (GLuint index, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLint format);&#10;typedef void ( * PFNGLMEMORYBARRIEREXTPROC) (GLbitfield barriers);&#10;# 7169 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSTENCILCLEARTAGEXTPROC) (GLsizei stencilTagBits, GLuint stencilClearTag);&#10;# 7179 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLACTIVESTENCILFACEEXTPROC) (GLenum face);&#10;# 7193 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXSUBIMAGE1DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXSUBIMAGE2DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);&#10;# 7259 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXIMAGE3DEXTPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXSUBIMAGE3DEXTPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);&#10;# 7286 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXBUFFEREXTPROC) (GLenum target, GLenum internalformat, GLuint buffer);&#10;# 7422 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, const GLuint *params);&#10;typedef void ( * PFNGLGETTEXPARAMETERIIVEXTPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETTEXPARAMETERIUIVEXTPROC) (GLenum target, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLCLEARCOLORIIEXTPROC) (GLint red, GLint green, GLint blue, GLint alpha);&#10;typedef void ( * PFNGLCLEARCOLORIUIEXTPROC) (GLuint red, GLuint green, GLuint blue, GLuint alpha);&#10;# 7459 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLboolean ( * PFNGLARETEXTURESRESIDENTEXTPROC) (GLsizei n, const GLuint *textures, GLboolean *residences);&#10;typedef void ( * PFNGLBINDTEXTUREEXTPROC) (GLenum target, GLuint texture);&#10;typedef void ( * PFNGLDELETETEXTURESEXTPROC) (GLsizei n, const GLuint *textures);&#10;typedef void ( * PFNGLGENTEXTURESEXTPROC) (GLsizei n, GLuint *textures);&#10;typedef GLboolean ( * PFNGLISTEXTUREEXTPROC) (GLuint texture);&#10;typedef void ( * PFNGLPRIORITIZETEXTURESEXTPROC) (GLsizei n, const GLuint *textures, const GLclampf *priorities);&#10;# 7479 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXTURENORMALEXTPROC) (GLenum mode);&#10;# 7551 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETQUERYOBJECTI64VEXTPROC) (GLuint id, GLenum pname, GLint64 *params);&#10;typedef void ( * PFNGLGETQUERYOBJECTUI64VEXTPROC) (GLuint id, GLenum pname, GLuint64 *params);&#10;# 7576 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKEXTPROC) (GLenum primitiveMode);&#10;typedef void ( * PFNGLENDTRANSFORMFEEDBACKEXTPROC) (void);&#10;typedef void ( * PFNGLBINDBUFFERRANGEEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);&#10;typedef void ( * PFNGLBINDBUFFEROFFSETEXTPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);&#10;typedef void ( * PFNGLBINDBUFFERBASEEXTPROC) (GLenum target, GLuint index, GLuint buffer);&#10;typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);&#10;typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);&#10;# 7628 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLARRAYELEMENTEXTPROC) (GLint i);&#10;typedef void ( * PFNGLCOLORPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);&#10;typedef void ( * PFNGLDRAWARRAYSEXTPROC) (GLenum mode, GLint first, GLsizei count);&#10;typedef void ( * PFNGLEDGEFLAGPOINTEREXTPROC) (GLsizei stride, GLsizei count, const GLboolean *pointer);&#10;typedef void ( * PFNGLGETPOINTERVEXTPROC) (GLenum pname, void **params);&#10;typedef void ( * PFNGLINDEXPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);&#10;typedef void ( * PFNGLNORMALPOINTEREXTPROC) (GLenum type, GLsizei stride, GLsizei count, const void *pointer);&#10;typedef void ( * PFNGLTEXCOORDPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);&#10;typedef void ( * PFNGLVERTEXPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, GLsizei count, const void *pointer);&#10;# 7668 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBL1DEXTPROC) (GLuint index, GLdouble x);&#10;typedef void ( * PFNGLVERTEXATTRIBL2DEXTPROC) (GLuint index, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXATTRIBL3DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXATTRIBL4DEXTPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXATTRIBL1DVEXTPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL2DVEXTPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL3DVEXTPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL4DVEXTPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBLPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLGETVERTEXATTRIBLDVEXTPROC) (GLuint index, GLenum pname, GLdouble *params);&#10;# 7804 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINVERTEXSHADEREXTPROC) (void);&#10;typedef void ( * PFNGLENDVERTEXSHADEREXTPROC) (void);&#10;typedef void ( * PFNGLBINDVERTEXSHADEREXTPROC) (GLuint id);&#10;typedef GLuint ( * PFNGLGENVERTEXSHADERSEXTPROC) (GLuint range);&#10;typedef void ( * PFNGLDELETEVERTEXSHADEREXTPROC) (GLuint id);&#10;typedef void ( * PFNGLSHADEROP1EXTPROC) (GLenum op, GLuint res, GLuint arg1);&#10;typedef void ( * PFNGLSHADEROP2EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2);&#10;typedef void ( * PFNGLSHADEROP3EXTPROC) (GLenum op, GLuint res, GLuint arg1, GLuint arg2, GLuint arg3);&#10;typedef void ( * PFNGLSWIZZLEEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);&#10;typedef void ( * PFNGLWRITEMASKEXTPROC) (GLuint res, GLuint in, GLenum outX, GLenum outY, GLenum outZ, GLenum outW);&#10;typedef void ( * PFNGLINSERTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);&#10;typedef void ( * PFNGLEXTRACTCOMPONENTEXTPROC) (GLuint res, GLuint src, GLuint num);&#10;typedef GLuint ( * PFNGLGENSYMBOLSEXTPROC) (GLenum datatype, GLenum storagetype, GLenum range, GLuint components);&#10;typedef void ( * PFNGLSETINVARIANTEXTPROC) (GLuint id, GLenum type, const void *addr);&#10;typedef void ( * PFNGLSETLOCALCONSTANTEXTPROC) (GLuint id, GLenum type, const void *addr);&#10;typedef void ( * PFNGLVARIANTBVEXTPROC) (GLuint id, const GLbyte *addr);&#10;typedef void ( * PFNGLVARIANTSVEXTPROC) (GLuint id, const GLshort *addr);&#10;typedef void ( * PFNGLVARIANTIVEXTPROC) (GLuint id, const GLint *addr);&#10;typedef void ( * PFNGLVARIANTFVEXTPROC) (GLuint id, const GLfloat *addr);&#10;typedef void ( * PFNGLVARIANTDVEXTPROC) (GLuint id, const GLdouble *addr);&#10;typedef void ( * PFNGLVARIANTUBVEXTPROC) (GLuint id, const GLubyte *addr);&#10;typedef void ( * PFNGLVARIANTUSVEXTPROC) (GLuint id, const GLushort *addr);&#10;typedef void ( * PFNGLVARIANTUIVEXTPROC) (GLuint id, const GLuint *addr);&#10;typedef void ( * PFNGLVARIANTPOINTEREXTPROC) (GLuint id, GLenum type, GLuint stride, const void *addr);&#10;typedef void ( * PFNGLENABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);&#10;typedef void ( * PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC) (GLuint id);&#10;typedef GLuint ( * PFNGLBINDLIGHTPARAMETEREXTPROC) (GLenum light, GLenum value);&#10;typedef GLuint ( * PFNGLBINDMATERIALPARAMETEREXTPROC) (GLenum face, GLenum value);&#10;typedef GLuint ( * PFNGLBINDTEXGENPARAMETEREXTPROC) (GLenum unit, GLenum coord, GLenum value);&#10;typedef GLuint ( * PFNGLBINDTEXTUREUNITPARAMETEREXTPROC) (GLenum unit, GLenum value);&#10;typedef GLuint ( * PFNGLBINDPARAMETEREXTPROC) (GLenum value);&#10;typedef GLboolean ( * PFNGLISVARIANTENABLEDEXTPROC) (GLuint id, GLenum cap);&#10;typedef void ( * PFNGLGETVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);&#10;typedef void ( * PFNGLGETVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);&#10;typedef void ( * PFNGLGETVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);&#10;typedef void ( * PFNGLGETVARIANTPOINTERVEXTPROC) (GLuint id, GLenum value, void **data);&#10;typedef void ( * PFNGLGETINVARIANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);&#10;typedef void ( * PFNGLGETINVARIANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);&#10;typedef void ( * PFNGLGETINVARIANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);&#10;typedef void ( * PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC) (GLuint id, GLenum value, GLboolean *data);&#10;typedef void ( * PFNGLGETLOCALCONSTANTINTEGERVEXTPROC) (GLuint id, GLenum value, GLint *data);&#10;typedef void ( * PFNGLGETLOCALCONSTANTFLOATVEXTPROC) (GLuint id, GLenum value, GLfloat *data);&#10;# 7907 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXWEIGHTFEXTPROC) (GLfloat weight);&#10;typedef void ( * PFNGLVERTEXWEIGHTFVEXTPROC) (const GLfloat *weight);&#10;typedef void ( * PFNGLVERTEXWEIGHTPOINTEREXTPROC) (GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;# 7920 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLsync ( * PFNGLIMPORTSYNCEXTPROC) (GLenum external_sync_type, GLintptr external_sync, GLbitfield flags);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLFRAMETERMINATORGREMEDYPROC) (void);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLSTRINGMARKERGREMEDYPROC) (GLsizei len, const void *string);&#10;# 7967 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLIMAGETRANSFORMPARAMETERIHPPROC) (GLenum target, GLenum pname, GLint param);&#10;typedef void ( * PFNGLIMAGETRANSFORMPARAMETERFHPPROC) (GLenum target, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;# 8003 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMULTIMODEDRAWARRAYSIBMPROC) (const GLenum *mode, const GLint *first, const GLsizei *count, GLsizei primcount, GLint modestride);&#10;typedef void ( * PFNGLMULTIMODEDRAWELEMENTSIBMPROC) (const GLenum *mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei primcount, GLint modestride);&#10;# 8020 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFLUSHSTATICDATAIBMPROC) (GLenum target);&#10;# 8049 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLSECONDARYCOLORPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLEDGEFLAGPOINTERLISTIBMPROC) (GLint stride, const GLboolean **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLFOGCOORDPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLINDEXPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLNORMALPOINTERLISTIBMPROC) (GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLTEXCOORDPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;typedef void ( * PFNGLVERTEXPOINTERLISTIBMPROC) (GLint size, GLenum type, GLint stride, const void **pointer, GLint ptrstride);&#10;# 8071 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDFUNCSEPARATEINGRPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);&#10;# 8104 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSYNCTEXTUREINTELPROC) (GLuint texture);&#10;typedef void ( * PFNGLUNMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level);&#10;typedef void *( * PFNGLMAPTEXTURE2DINTELPROC) (GLuint texture, GLint level, GLbitfield access, GLint *stride, GLenum *layout);&#10;# 8121 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);&#10;typedef void ( * PFNGLNORMALPOINTERVINTELPROC) (GLenum type, const void **pointer);&#10;typedef void ( * PFNGLCOLORPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);&#10;typedef void ( * PFNGLTEXCOORDPOINTERVINTELPROC) (GLint size, GLenum type, const void **pointer);&#10;# 8155 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINPERFQUERYINTELPROC) (GLuint queryHandle);&#10;typedef void ( * PFNGLCREATEPERFQUERYINTELPROC) (GLuint queryId, GLuint *queryHandle);&#10;typedef void ( * PFNGLDELETEPERFQUERYINTELPROC) (GLuint queryHandle);&#10;typedef void ( * PFNGLENDPERFQUERYINTELPROC) (GLuint queryHandle);&#10;typedef void ( * PFNGLGETFIRSTPERFQUERYIDINTELPROC) (GLuint *queryId);&#10;typedef void ( * PFNGLGETNEXTPERFQUERYIDINTELPROC) (GLuint queryId, GLuint *nextQueryId);&#10;typedef void ( * PFNGLGETPERFCOUNTERINFOINTELPROC) (GLuint queryId, GLuint counterId, GLuint counterNameLength, GLchar *counterName, GLuint counterDescLength, GLchar *counterDesc, GLuint *counterOffset, GLuint *counterDataSize, GLuint *counterTypeEnum, GLuint *counterDataTypeEnum, GLuint64 *rawCounterMaxValue);&#10;typedef void ( * PFNGLGETPERFQUERYDATAINTELPROC) (GLuint queryHandle, GLuint flags, GLsizei dataSize, GLvoid *data, GLuint *bytesWritten);&#10;typedef void ( * PFNGLGETPERFQUERYIDBYNAMEINTELPROC) (GLchar *queryName, GLuint *queryId);&#10;typedef void ( * PFNGLGETPERFQUERYINFOINTELPROC) (GLuint queryId, GLuint queryNameLength, GLchar *queryName, GLuint *dataSize, GLuint *noCounters, GLuint *noInstances, GLuint *capsMask);&#10;# 8196 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLRESIZEBUFFERSMESAPROC) (void);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLWINDOWPOS2DMESAPROC) (GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLWINDOWPOS2DVMESAPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS2FMESAPROC) (GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLWINDOWPOS2FVMESAPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS2IMESAPROC) (GLint x, GLint y);&#10;typedef void ( * PFNGLWINDOWPOS2IVMESAPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS2SMESAPROC) (GLshort x, GLshort y);&#10;typedef void ( * PFNGLWINDOWPOS2SVMESAPROC) (const GLshort *v);&#10;typedef void ( * PFNGLWINDOWPOS3DMESAPROC) (GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLWINDOWPOS3DVMESAPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS3FMESAPROC) (GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLWINDOWPOS3FVMESAPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS3IMESAPROC) (GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLWINDOWPOS3IVMESAPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS3SMESAPROC) (GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLWINDOWPOS3SVMESAPROC) (const GLshort *v);&#10;typedef void ( * PFNGLWINDOWPOS4DMESAPROC) (GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLWINDOWPOS4DVMESAPROC) (const GLdouble *v);&#10;typedef void ( * PFNGLWINDOWPOS4FMESAPROC) (GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLWINDOWPOS4FVMESAPROC) (const GLfloat *v);&#10;typedef void ( * PFNGLWINDOWPOS4IMESAPROC) (GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLWINDOWPOS4IVMESAPROC) (const GLint *v);&#10;typedef void ( * PFNGLWINDOWPOS4SMESAPROC) (GLshort x, GLshort y, GLshort z, GLshort w);&#10;typedef void ( * PFNGLWINDOWPOS4SVMESAPROC) (const GLshort *v);&#10;# 8265 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINCONDITIONALRENDERNVXPROC) (GLuint id);&#10;typedef void ( * PFNGLENDCONDITIONALRENDERNVXPROC) (void);&#10;# 8284 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC) (GLenum mode, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);&#10;typedef void ( * PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawCount, GLsizei stride, GLint vertexBufferCount);&#10;# 8294 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLuint64 ( * PFNGLGETTEXTUREHANDLENVPROC) (GLuint texture);&#10;typedef GLuint64 ( * PFNGLGETTEXTURESAMPLERHANDLENVPROC) (GLuint texture, GLuint sampler);&#10;typedef void ( * PFNGLMAKETEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);&#10;typedef void ( * PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC) (GLuint64 handle);&#10;typedef GLuint64 ( * PFNGLGETIMAGEHANDLENVPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format);&#10;typedef void ( * PFNGLMAKEIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle, GLenum access);&#10;typedef void ( * PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC) (GLuint64 handle);&#10;typedef void ( * PFNGLUNIFORMHANDLEUI64NVPROC) (GLint location, GLuint64 value);&#10;typedef void ( * PFNGLUNIFORMHANDLEUI64VNVPROC) (GLint location, GLsizei count, const GLuint64 *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC) (GLuint program, GLint location, GLuint64 value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values);&#10;typedef GLboolean ( * PFNGLISTEXTUREHANDLERESIDENTNVPROC) (GLuint64 handle);&#10;typedef GLboolean ( * PFNGLISIMAGEHANDLERESIDENTNVPROC) (GLuint64 handle);&#10;# 8375 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBLENDPARAMETERINVPROC) (GLenum pname, GLint value);&#10;typedef void ( * PFNGLBLENDBARRIERNVPROC) (void);&#10;# 8404 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINCONDITIONALRENDERNVPROC) (GLuint id, GLenum mode);&#10;typedef void ( * PFNGLENDCONDITIONALRENDERNVPROC) (void);&#10;# 8420 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOPYIMAGESUBDATANVPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei width, GLsizei height, GLsizei depth);&#10;# 8438 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDEPTHRANGEDNVPROC) (GLdouble zNear, GLdouble zFar);&#10;typedef void ( * PFNGLCLEARDEPTHDNVPROC) (GLdouble depth);&#10;typedef void ( * PFNGLDEPTHBOUNDSDNVPROC) (GLdouble zmin, GLdouble zmax);&#10;# 8455 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWTEXTURENVPROC) (GLuint texture, GLuint sampler, GLfloat x0, GLfloat y0, GLfloat x1, GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0, GLfloat s1, GLfloat t1);&#10;# 8487 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLint uorder, GLint vorder, GLboolean packed, const void *points);&#10;typedef void ( * PFNGLMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLGETMAPCONTROLPOINTSNVPROC) (GLenum target, GLuint index, GLenum type, GLsizei ustride, GLsizei vstride, GLboolean packed, void *points);&#10;typedef void ( * PFNGLGETMAPPARAMETERIVNVPROC) (GLenum target, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMAPPARAMETERFVNVPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETMAPATTRIBPARAMETERIVNVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETMAPATTRIBPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLEVALMAPSNVPROC) (GLenum target, GLenum mode);&#10;# 8521 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETMULTISAMPLEFVNVPROC) (GLenum pname, GLuint index, GLfloat *val);&#10;typedef void ( * PFNGLSAMPLEMASKINDEXEDNVPROC) (GLuint index, GLbitfield mask);&#10;typedef void ( * PFNGLTEXRENDERBUFFERNVPROC) (GLenum target, GLuint renderbuffer);&#10;# 8536 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDELETEFENCESNVPROC) (GLsizei n, const GLuint *fences);&#10;typedef void ( * PFNGLGENFENCESNVPROC) (GLsizei n, GLuint *fences);&#10;typedef GLboolean ( * PFNGLISFENCENVPROC) (GLuint fence);&#10;typedef GLboolean ( * PFNGLTESTFENCENVPROC) (GLuint fence);&#10;typedef void ( * PFNGLGETFENCEIVNVPROC) (GLuint fence, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLFINISHFENCENVPROC) (GLuint fence);&#10;typedef void ( * PFNGLSETFENCENVPROC) (GLuint fence, GLenum condition);&#10;# 8588 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4FNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLfloat *v);&#10;typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4DNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, const GLdouble *v);&#10;typedef void ( * PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLfloat *params);&#10;typedef void ( * PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC) (GLuint id, GLsizei len, const GLubyte *name, GLdouble *params);&#10;# 8627 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLenum internalformat, GLsizei width, GLsizei height);&#10;# 8638 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMVERTEXLIMITNVPROC) (GLenum target, GLint limit);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTUREEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);&#10;typedef void ( * PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLenum face);&#10;# 8664 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);&#10;typedef void ( * PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERI4INVPROC) (GLenum target, GLuint index, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERI4IVNVPROC) (GLenum target, GLuint index, const GLint *params);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERSI4IVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLint *params);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERI4UINVPROC) (GLenum target, GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERI4UIVNVPROC) (GLenum target, GLuint index, const GLuint *params);&#10;typedef void ( * PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLuint *params);&#10;typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);&#10;typedef void ( * PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);&#10;typedef void ( * PFNGLGETPROGRAMENVPARAMETERIIVNVPROC) (GLenum target, GLuint index, GLint *params);&#10;typedef void ( * PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC) (GLenum target, GLuint index, GLuint *params);&#10;# 8710 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC) (GLenum target, GLsizei count, const GLuint *params);&#10;typedef void ( * PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC) (GLenum target, GLuint index, GLuint *param);&#10;# 8724 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef int64_t GLint64EXT;&#10;# 8753 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLUNIFORM1I64NVPROC) (GLint location, GLint64EXT x);&#10;typedef void ( * PFNGLUNIFORM2I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y);&#10;typedef void ( * PFNGLUNIFORM3I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);&#10;typedef void ( * PFNGLUNIFORM4I64NVPROC) (GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);&#10;typedef void ( * PFNGLUNIFORM1I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM2I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM3I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM4I64VNVPROC) (GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM1UI64NVPROC) (GLint location, GLuint64EXT x);&#10;typedef void ( * PFNGLUNIFORM2UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y);&#10;typedef void ( * PFNGLUNIFORM3UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);&#10;typedef void ( * PFNGLUNIFORM4UI64NVPROC) (GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);&#10;typedef void ( * PFNGLUNIFORM1UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM2UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM3UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLUNIFORM4UI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLGETUNIFORMI64VNVPROC) (GLuint program, GLint location, GLint64EXT *params);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1I64NVPROC) (GLuint program, GLint location, GLint64EXT x);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4I64NVPROC) (GLuint program, GLint location, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4I64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UI64NVPROC) (GLuint program, GLint location, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);&#10;typedef void ( * PFNGLPROGRAMUNIFORM1UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM2UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM3UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLPROGRAMUNIFORM4UI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);&#10;# 8825 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef unsigned short GLhalfNV;&#10;&#10;typedef void ( * PFNGLVERTEX2HNVPROC) (GLhalfNV x, GLhalfNV y);&#10;typedef void ( * PFNGLVERTEX2HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEX3HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z);&#10;typedef void ( * PFNGLVERTEX3HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEX4HNVPROC) (GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);&#10;typedef void ( * PFNGLVERTEX4HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLNORMAL3HNVPROC) (GLhalfNV nx, GLhalfNV ny, GLhalfNV nz);&#10;typedef void ( * PFNGLNORMAL3HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);&#10;typedef void ( * PFNGLCOLOR3HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLCOLOR4HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue, GLhalfNV alpha);&#10;typedef void ( * PFNGLCOLOR4HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLTEXCOORD1HNVPROC) (GLhalfNV s);&#10;typedef void ( * PFNGLTEXCOORD1HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLTEXCOORD2HNVPROC) (GLhalfNV s, GLhalfNV t);&#10;typedef void ( * PFNGLTEXCOORD2HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLTEXCOORD3HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r);&#10;typedef void ( * PFNGLTEXCOORD3HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLTEXCOORD4HNVPROC) (GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);&#10;typedef void ( * PFNGLTEXCOORD4HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLMULTITEXCOORD1HNVPROC) (GLenum target, GLhalfNV s);&#10;typedef void ( * PFNGLMULTITEXCOORD1HVNVPROC) (GLenum target, const GLhalfNV *v);&#10;typedef void ( * PFNGLMULTITEXCOORD2HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t);&#10;typedef void ( * PFNGLMULTITEXCOORD2HVNVPROC) (GLenum target, const GLhalfNV *v);&#10;typedef void ( * PFNGLMULTITEXCOORD3HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r);&#10;typedef void ( * PFNGLMULTITEXCOORD3HVNVPROC) (GLenum target, const GLhalfNV *v);&#10;typedef void ( * PFNGLMULTITEXCOORD4HNVPROC) (GLenum target, GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q);&#10;typedef void ( * PFNGLMULTITEXCOORD4HVNVPROC) (GLenum target, const GLhalfNV *v);&#10;typedef void ( * PFNGLFOGCOORDHNVPROC) (GLhalfNV fog);&#10;typedef void ( * PFNGLFOGCOORDHVNVPROC) (const GLhalfNV *fog);&#10;typedef void ( * PFNGLSECONDARYCOLOR3HNVPROC) (GLhalfNV red, GLhalfNV green, GLhalfNV blue);&#10;typedef void ( * PFNGLSECONDARYCOLOR3HVNVPROC) (const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXWEIGHTHNVPROC) (GLhalfNV weight);&#10;typedef void ( * PFNGLVERTEXWEIGHTHVNVPROC) (const GLhalfNV *weight);&#10;typedef void ( * PFNGLVERTEXATTRIB1HNVPROC) (GLuint index, GLhalfNV x);&#10;typedef void ( * PFNGLVERTEXATTRIB1HVNVPROC) (GLuint index, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y);&#10;typedef void ( * PFNGLVERTEXATTRIB2HVNVPROC) (GLuint index, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z);&#10;typedef void ( * PFNGLVERTEXATTRIB3HVNVPROC) (GLuint index, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4HNVPROC) (GLuint index, GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w);&#10;typedef void ( * PFNGLVERTEXATTRIB4HVNVPROC) (GLuint index, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS1HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS2HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS3HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS4HVNVPROC) (GLuint index, GLsizei n, const GLhalfNV *v);&#10;# 8945 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGENOCCLUSIONQUERIESNVPROC) (GLsizei n, GLuint *ids);&#10;typedef void ( * PFNGLDELETEOCCLUSIONQUERIESNVPROC) (GLsizei n, const GLuint *ids);&#10;typedef GLboolean ( * PFNGLISOCCLUSIONQUERYNVPROC) (GLuint id);&#10;typedef void ( * PFNGLBEGINOCCLUSIONQUERYNVPROC) (GLuint id);&#10;typedef void ( * PFNGLENDOCCLUSIONQUERYNVPROC) (void);&#10;typedef void ( * PFNGLGETOCCLUSIONQUERYIVNVPROC) (GLuint id, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETOCCLUSIONQUERYUIVNVPROC) (GLuint id, GLenum pname, GLuint *params);&#10;# 8976 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLfloat *params);&#10;typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLint *params);&#10;typedef void ( * PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC) (GLenum target, GLuint bindingIndex, GLuint wordIndex, GLsizei count, const GLuint *params);&#10;# 9121 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLuint ( * PFNGLGENPATHSNVPROC) (GLsizei range);&#10;typedef void ( * PFNGLDELETEPATHSNVPROC) (GLuint path, GLsizei range);&#10;typedef GLboolean ( * PFNGLISPATHNVPROC) (GLuint path);&#10;typedef void ( * PFNGLPATHCOMMANDSNVPROC) (GLuint path, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);&#10;typedef void ( * PFNGLPATHCOORDSNVPROC) (GLuint path, GLsizei numCoords, GLenum coordType, const void *coords);&#10;typedef void ( * PFNGLPATHSUBCOMMANDSNVPROC) (GLuint path, GLsizei commandStart, GLsizei commandsToDelete, GLsizei numCommands, const GLubyte *commands, GLsizei numCoords, GLenum coordType, const void *coords);&#10;typedef void ( * PFNGLPATHSUBCOORDSNVPROC) (GLuint path, GLsizei coordStart, GLsizei numCoords, GLenum coordType, const void *coords);&#10;typedef void ( * PFNGLPATHSTRINGNVPROC) (GLuint path, GLenum format, GLsizei length, const void *pathString);&#10;typedef void ( * PFNGLPATHGLYPHSNVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLsizei numGlyphs, GLenum type, const void *charcodes, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);&#10;typedef void ( * PFNGLPATHGLYPHRANGENVPROC) (GLuint firstPathName, GLenum fontTarget, const void *fontName, GLbitfield fontStyle, GLuint firstGlyph, GLsizei numGlyphs, GLenum handleMissingGlyphs, GLuint pathParameterTemplate, GLfloat emScale);&#10;typedef void ( * PFNGLWEIGHTPATHSNVPROC) (GLuint resultPath, GLsizei numPaths, const GLuint *paths, const GLfloat *weights);&#10;typedef void ( * PFNGLCOPYPATHNVPROC) (GLuint resultPath, GLuint srcPath);&#10;typedef void ( * PFNGLINTERPOLATEPATHSNVPROC) (GLuint resultPath, GLuint pathA, GLuint pathB, GLfloat weight);&#10;typedef void ( * PFNGLTRANSFORMPATHNVPROC) (GLuint resultPath, GLuint srcPath, GLenum transformType, const GLfloat *transformValues);&#10;typedef void ( * PFNGLPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, const GLint *value);&#10;typedef void ( * PFNGLPATHPARAMETERINVPROC) (GLuint path, GLenum pname, GLint value);&#10;typedef void ( * PFNGLPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, const GLfloat *value);&#10;typedef void ( * PFNGLPATHPARAMETERFNVPROC) (GLuint path, GLenum pname, GLfloat value);&#10;typedef void ( * PFNGLPATHDASHARRAYNVPROC) (GLuint path, GLsizei dashCount, const GLfloat *dashArray);&#10;typedef void ( * PFNGLPATHSTENCILFUNCNVPROC) (GLenum func, GLint ref, GLuint mask);&#10;typedef void ( * PFNGLPATHSTENCILDEPTHOFFSETNVPROC) (GLfloat factor, GLfloat units);&#10;typedef void ( * PFNGLSTENCILFILLPATHNVPROC) (GLuint path, GLenum fillMode, GLuint mask);&#10;typedef void ( * PFNGLSTENCILSTROKEPATHNVPROC) (GLuint path, GLint reference, GLuint mask);&#10;typedef void ( * PFNGLSTENCILFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum fillMode, GLuint mask, GLenum transformType, const GLfloat *transformValues);&#10;typedef void ( * PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLint reference, GLuint mask, GLenum transformType, const GLfloat *transformValues);&#10;typedef void ( * PFNGLPATHCOVERDEPTHFUNCNVPROC) (GLenum func);&#10;typedef void ( * PFNGLPATHCOLORGENNVPROC) (GLenum color, GLenum genMode, GLenum colorFormat, const GLfloat *coeffs);&#10;typedef void ( * PFNGLPATHTEXGENNVPROC) (GLenum texCoordSet, GLenum genMode, GLint components, const GLfloat *coeffs);&#10;typedef void ( * PFNGLPATHFOGGENNVPROC) (GLenum genMode);&#10;typedef void ( * PFNGLCOVERFILLPATHNVPROC) (GLuint path, GLenum coverMode);&#10;typedef void ( * PFNGLCOVERSTROKEPATHNVPROC) (GLuint path, GLenum coverMode);&#10;typedef void ( * PFNGLCOVERFILLPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);&#10;typedef void ( * PFNGLCOVERSTROKEPATHINSTANCEDNVPROC) (GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLenum coverMode, GLenum transformType, const GLfloat *transformValues);&#10;typedef void ( * PFNGLGETPATHPARAMETERIVNVPROC) (GLuint path, GLenum pname, GLint *value);&#10;typedef void ( * PFNGLGETPATHPARAMETERFVNVPROC) (GLuint path, GLenum pname, GLfloat *value);&#10;typedef void ( * PFNGLGETPATHCOMMANDSNVPROC) (GLuint path, GLubyte *commands);&#10;typedef void ( * PFNGLGETPATHCOORDSNVPROC) (GLuint path, GLfloat *coords);&#10;typedef void ( * PFNGLGETPATHDASHARRAYNVPROC) (GLuint path, GLfloat *dashArray);&#10;typedef void ( * PFNGLGETPATHMETRICSNVPROC) (GLbitfield metricQueryMask, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLsizei stride, GLfloat *metrics);&#10;typedef void ( * PFNGLGETPATHMETRICRANGENVPROC) (GLbitfield metricQueryMask, GLuint firstPathName, GLsizei numPaths, GLsizei stride, GLfloat *metrics);&#10;typedef void ( * PFNGLGETPATHSPACINGNVPROC) (GLenum pathListMode, GLsizei numPaths, GLenum pathNameType, const void *paths, GLuint pathBase, GLfloat advanceScale, GLfloat kerningScale, GLenum transformType, GLfloat *returnedSpacing);&#10;typedef void ( * PFNGLGETPATHCOLORGENIVNVPROC) (GLenum color, GLenum pname, GLint *value);&#10;typedef void ( * PFNGLGETPATHCOLORGENFVNVPROC) (GLenum color, GLenum pname, GLfloat *value);&#10;typedef void ( * PFNGLGETPATHTEXGENIVNVPROC) (GLenum texCoordSet, GLenum pname, GLint *value);&#10;typedef void ( * PFNGLGETPATHTEXGENFVNVPROC) (GLenum texCoordSet, GLenum pname, GLfloat *value);&#10;typedef GLboolean ( * PFNGLISPOINTINFILLPATHNVPROC) (GLuint path, GLuint mask, GLfloat x, GLfloat y);&#10;typedef GLboolean ( * PFNGLISPOINTINSTROKEPATHNVPROC) (GLuint path, GLfloat x, GLfloat y);&#10;typedef GLfloat ( * PFNGLGETPATHLENGTHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments);&#10;typedef GLboolean ( * PFNGLPOINTALONGPATHNVPROC) (GLuint path, GLsizei startSegment, GLsizei numSegments, GLfloat distance, GLfloat *x, GLfloat *y, GLfloat *tangentX, GLfloat *tangentY);&#10;# 9231 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPIXELDATARANGENVPROC) (GLenum target, GLsizei length, const void *pointer);&#10;typedef void ( * PFNGLFLUSHPIXELDATARANGENVPROC) (GLenum target);&#10;# 9244 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPOINTPARAMETERINVPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLPOINTPARAMETERIVNVPROC) (GLenum pname, const GLint *params);&#10;# 9260 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPRESENTFRAMEKEYEDNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLuint key0, GLenum target1, GLuint fill1, GLuint key1);&#10;typedef void ( * PFNGLPRESENTFRAMEDUALFILLNVPROC) (GLuint video_slot, GLuint64EXT minPresentTime, GLuint beginPresentTimeId, GLuint presentDurationId, GLenum type, GLenum target0, GLuint fill0, GLenum target1, GLuint fill1, GLenum target2, GLuint fill2, GLenum target3, GLuint fill3);&#10;typedef void ( * PFNGLGETVIDEOIVNVPROC) (GLuint video_slot, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVIDEOUIVNVPROC) (GLuint video_slot, GLenum pname, GLuint *params);&#10;typedef void ( * PFNGLGETVIDEOI64VNVPROC) (GLuint video_slot, GLenum pname, GLint64EXT *params);&#10;typedef void ( * PFNGLGETVIDEOUI64VNVPROC) (GLuint video_slot, GLenum pname, GLuint64EXT *params);&#10;# 9280 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPRIMITIVERESTARTNVPROC) (void);&#10;typedef void ( * PFNGLPRIMITIVERESTARTINDEXNVPROC) (GLuint index);&#10;# 9339 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOMBINERPARAMETERFVNVPROC) (GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLCOMBINERPARAMETERFNVPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLCOMBINERPARAMETERIVNVPROC) (GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLCOMBINERPARAMETERINVPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLCOMBINERINPUTNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);&#10;typedef void ( * PFNGLCOMBINEROUTPUTNVPROC) (GLenum stage, GLenum portion, GLenum abOutput, GLenum cdOutput, GLenum sumOutput, GLenum scale, GLenum bias, GLboolean abDotProduct, GLboolean cdDotProduct, GLboolean muxSum);&#10;typedef void ( * PFNGLFINALCOMBINERINPUTNVPROC) (GLenum variable, GLenum input, GLenum mapping, GLenum componentUsage);&#10;typedef void ( * PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum variable, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC) (GLenum stage, GLenum portion, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC) (GLenum variable, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC) (GLenum variable, GLenum pname, GLint *params);&#10;# 9372 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC) (GLenum stage, GLenum pname, GLfloat *params);&#10;# 9393 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLMAKEBUFFERRESIDENTNVPROC) (GLenum target, GLenum access);&#10;typedef void ( * PFNGLMAKEBUFFERNONRESIDENTNVPROC) (GLenum target);&#10;typedef GLboolean ( * PFNGLISBUFFERRESIDENTNVPROC) (GLenum target);&#10;typedef void ( * PFNGLMAKENAMEDBUFFERRESIDENTNVPROC) (GLuint buffer, GLenum access);&#10;typedef void ( * PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC) (GLuint buffer);&#10;typedef GLboolean ( * PFNGLISNAMEDBUFFERRESIDENTNVPROC) (GLuint buffer);&#10;typedef void ( * PFNGLGETBUFFERPARAMETERUI64VNVPROC) (GLenum target, GLenum pname, GLuint64EXT *params);&#10;typedef void ( * PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC) (GLuint buffer, GLenum pname, GLuint64EXT *params);&#10;typedef void ( * PFNGLGETINTEGERUI64VNVPROC) (GLenum value, GLuint64EXT *result);&#10;typedef void ( * PFNGLUNIFORMUI64NVPROC) (GLint location, GLuint64EXT value);&#10;typedef void ( * PFNGLUNIFORMUI64VNVPROC) (GLint location, GLsizei count, const GLuint64EXT *value);&#10;typedef void ( * PFNGLGETUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLuint64EXT *params);&#10;typedef void ( * PFNGLPROGRAMUNIFORMUI64NVPROC) (GLuint program, GLint location, GLuint64EXT value);&#10;typedef void ( * PFNGLPROGRAMUNIFORMUI64VNVPROC) (GLuint program, GLint location, GLsizei count, const GLuint64EXT *value);&#10;# 9469 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXTUREBARRIERNVPROC) (void);&#10;# 9497 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);&#10;typedef void ( * PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);&#10;typedef void ( * PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);&#10;typedef void ( * PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC) (GLuint texture, GLenum target, GLsizei samples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);&#10;typedef void ( * PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLboolean fixedSampleLocations);&#10;typedef void ( * PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC) (GLuint texture, GLenum target, GLsizei coverageSamples, GLsizei colorSamples, GLint internalFormat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedSampleLocations);&#10;# 9657 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINTRANSFORMFEEDBACKNVPROC) (GLenum primitiveMode);&#10;typedef void ( * PFNGLENDTRANSFORMFEEDBACKNVPROC) (void);&#10;typedef void ( * PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC) (GLuint count, const GLint *attribs, GLenum bufferMode);&#10;typedef void ( * PFNGLBINDBUFFERRANGENVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);&#10;typedef void ( * PFNGLBINDBUFFEROFFSETNVPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset);&#10;typedef void ( * PFNGLBINDBUFFERBASENVPROC) (GLenum target, GLuint index, GLuint buffer);&#10;typedef void ( * PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC) (GLuint program, GLsizei count, const GLint *locations, GLenum bufferMode);&#10;typedef void ( * PFNGLACTIVEVARYINGNVPROC) (GLuint program, const GLchar *name);&#10;typedef GLint ( * PFNGLGETVARYINGLOCATIONNVPROC) (GLuint program, const GLchar *name);&#10;typedef void ( * PFNGLGETACTIVEVARYINGNVPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);&#10;typedef void ( * PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC) (GLuint program, GLuint index, GLint *location);&#10;typedef void ( * PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC) (GLsizei count, const GLint *attribs, GLsizei nbuffers, const GLint *bufstreams, GLenum bufferMode);&#10;# 9691 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBINDTRANSFORMFEEDBACKNVPROC) (GLenum target, GLuint id);&#10;typedef void ( * PFNGLDELETETRANSFORMFEEDBACKSNVPROC) (GLsizei n, const GLuint *ids);&#10;typedef void ( * PFNGLGENTRANSFORMFEEDBACKSNVPROC) (GLsizei n, GLuint *ids);&#10;typedef GLboolean ( * PFNGLISTRANSFORMFEEDBACKNVPROC) (GLuint id);&#10;typedef void ( * PFNGLPAUSETRANSFORMFEEDBACKNVPROC) (void);&#10;typedef void ( * PFNGLRESUMETRANSFORMFEEDBACKNVPROC) (void);&#10;typedef void ( * PFNGLDRAWTRANSFORMFEEDBACKNVPROC) (GLenum mode, GLuint id);&#10;# 9711 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLintptr GLvdpauSurfaceNV;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLVDPAUINITNVPROC) (const void *vdpDevice, const void *getProcAddress);&#10;typedef void ( * PFNGLVDPAUFININVPROC) (void);&#10;typedef GLvdpauSurfaceNV ( * PFNGLVDPAUREGISTERVIDEOSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);&#10;typedef GLvdpauSurfaceNV ( * PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC) (const void *vdpSurface, GLenum target, GLsizei numTextureNames, const GLuint *textureNames);&#10;typedef GLboolean ( * PFNGLVDPAUISSURFACENVPROC) (GLvdpauSurfaceNV surface);&#10;typedef void ( * PFNGLVDPAUUNREGISTERSURFACENVPROC) (GLvdpauSurfaceNV surface);&#10;typedef void ( * PFNGLVDPAUGETSURFACEIVNVPROC) (GLvdpauSurfaceNV surface, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values);&#10;typedef void ( * PFNGLVDPAUSURFACEACCESSNVPROC) (GLvdpauSurfaceNV surface, GLenum access);&#10;typedef void ( * PFNGLVDPAUMAPSURFACESNVPROC) (GLsizei numSurfaces, const GLvdpauSurfaceNV *surfaces);&#10;typedef void ( * PFNGLVDPAUUNMAPSURFACESNVPROC) (GLsizei numSurface, const GLvdpauSurfaceNV *surfaces);&#10;# 9747 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFLUSHVERTEXARRAYRANGENVPROC) (void);&#10;typedef void ( * PFNGLVERTEXARRAYRANGENVPROC) (GLsizei length, const void *pointer);&#10;# 9762 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBL1I64NVPROC) (GLuint index, GLint64EXT x);&#10;typedef void ( * PFNGLVERTEXATTRIBL2I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y);&#10;typedef void ( * PFNGLVERTEXATTRIBL3I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z);&#10;typedef void ( * PFNGLVERTEXATTRIBL4I64NVPROC) (GLuint index, GLint64EXT x, GLint64EXT y, GLint64EXT z, GLint64EXT w);&#10;typedef void ( * PFNGLVERTEXATTRIBL1I64VNVPROC) (GLuint index, const GLint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL2I64VNVPROC) (GLuint index, const GLint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL3I64VNVPROC) (GLuint index, const GLint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL4I64VNVPROC) (GLuint index, const GLint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL1UI64NVPROC) (GLuint index, GLuint64EXT x);&#10;typedef void ( * PFNGLVERTEXATTRIBL2UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y);&#10;typedef void ( * PFNGLVERTEXATTRIBL3UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z);&#10;typedef void ( * PFNGLVERTEXATTRIBL4UI64NVPROC) (GLuint index, GLuint64EXT x, GLuint64EXT y, GLuint64EXT z, GLuint64EXT w);&#10;typedef void ( * PFNGLVERTEXATTRIBL1UI64VNVPROC) (GLuint index, const GLuint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL2UI64VNVPROC) (GLuint index, const GLuint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL3UI64VNVPROC) (GLuint index, const GLuint64EXT *v);&#10;typedef void ( * PFNGLVERTEXATTRIBL4UI64VNVPROC) (GLuint index, const GLuint64EXT *v);&#10;typedef void ( * PFNGLGETVERTEXATTRIBLI64VNVPROC) (GLuint index, GLenum pname, GLint64EXT *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBLUI64VNVPROC) (GLuint index, GLenum pname, GLuint64EXT *params);&#10;typedef void ( * PFNGLVERTEXATTRIBLFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);&#10;# 9831 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBUFFERADDRESSRANGENVPROC) (GLenum pname, GLuint index, GLuint64EXT address, GLsizeiptr length);&#10;typedef void ( * PFNGLVERTEXFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLNORMALFORMATNVPROC) (GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLINDEXFORMATNVPROC) (GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLTEXCOORDFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLEDGEFLAGFORMATNVPROC) (GLsizei stride);&#10;typedef void ( * PFNGLSECONDARYCOLORFORMATNVPROC) (GLint size, GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLFOGCOORDFORMATNVPROC) (GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLVERTEXATTRIBFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride);&#10;typedef void ( * PFNGLVERTEXATTRIBIFORMATNVPROC) (GLuint index, GLint size, GLenum type, GLsizei stride);&#10;typedef void ( * PFNGLGETINTEGERUI64I_VNVPROC) (GLenum value, GLuint index, GLuint64EXT *result);&#10;# 9944 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLboolean ( * PFNGLAREPROGRAMSRESIDENTNVPROC) (GLsizei n, const GLuint *programs, GLboolean *residences);&#10;typedef void ( * PFNGLBINDPROGRAMNVPROC) (GLenum target, GLuint id);&#10;typedef void ( * PFNGLDELETEPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);&#10;typedef void ( * PFNGLEXECUTEPROGRAMNVPROC) (GLenum target, GLuint id, const GLfloat *params);&#10;typedef void ( * PFNGLGENPROGRAMSNVPROC) (GLsizei n, GLuint *programs);&#10;typedef void ( * PFNGLGETPROGRAMPARAMETERDVNVPROC) (GLenum target, GLuint index, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLGETPROGRAMPARAMETERFVNVPROC) (GLenum target, GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETPROGRAMIVNVPROC) (GLuint id, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETPROGRAMSTRINGNVPROC) (GLuint id, GLenum pname, GLubyte *program);&#10;typedef void ( * PFNGLGETTRACKMATRIXIVNVPROC) (GLenum target, GLuint address, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBDVNVPROC) (GLuint index, GLenum pname, GLdouble *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBFVNVPROC) (GLuint index, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIVNVPROC) (GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBPOINTERVNVPROC) (GLuint index, GLenum pname, void **pointer);&#10;typedef GLboolean ( * PFNGLISPROGRAMNVPROC) (GLuint id);&#10;typedef void ( * PFNGLLOADPROGRAMNVPROC) (GLenum target, GLuint id, GLsizei len, const GLubyte *program);&#10;typedef void ( * PFNGLPROGRAMPARAMETER4DNVPROC) (GLenum target, GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLPROGRAMPARAMETER4DVNVPROC) (GLenum target, GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLPROGRAMPARAMETER4FNVPROC) (GLenum target, GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLPROGRAMPARAMETER4FVNVPROC) (GLenum target, GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLPROGRAMPARAMETERS4DVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLPROGRAMPARAMETERS4FVNVPROC) (GLenum target, GLuint index, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLREQUESTRESIDENTPROGRAMSNVPROC) (GLsizei n, const GLuint *programs);&#10;typedef void ( * PFNGLTRACKMATRIXNVPROC) (GLenum target, GLuint address, GLenum matrix, GLenum transform);&#10;typedef void ( * PFNGLVERTEXATTRIBPOINTERNVPROC) (GLuint index, GLint fsize, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLVERTEXATTRIB1DNVPROC) (GLuint index, GLdouble x);&#10;typedef void ( * PFNGLVERTEXATTRIB1DVNVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1FNVPROC) (GLuint index, GLfloat x);&#10;typedef void ( * PFNGLVERTEXATTRIB1FVNVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB1SNVPROC) (GLuint index, GLshort x);&#10;typedef void ( * PFNGLVERTEXATTRIB1SVNVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2DNVPROC) (GLuint index, GLdouble x, GLdouble y);&#10;typedef void ( * PFNGLVERTEXATTRIB2DVNVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2FNVPROC) (GLuint index, GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLVERTEXATTRIB2FVNVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB2SNVPROC) (GLuint index, GLshort x, GLshort y);&#10;typedef void ( * PFNGLVERTEXATTRIB2SVNVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z);&#10;typedef void ( * PFNGLVERTEXATTRIB3DVNVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLVERTEXATTRIB3FVNVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB3SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z);&#10;typedef void ( * PFNGLVERTEXATTRIB3SVNVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4DNVPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);&#10;typedef void ( * PFNGLVERTEXATTRIB4DVNVPROC) (GLuint index, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4FNVPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLVERTEXATTRIB4FVNVPROC) (GLuint index, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4SNVPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);&#10;typedef void ( * PFNGLVERTEXATTRIB4SVNVPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIB4UBNVPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);&#10;typedef void ( * PFNGLVERTEXATTRIB4UBVNVPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS1DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS1FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS1SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS2DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS2FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS2SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS3DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS3FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS3SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS4DVNVPROC) (GLuint index, GLsizei count, const GLdouble *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS4FVNVPROC) (GLuint index, GLsizei count, const GLfloat *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS4SVNVPROC) (GLuint index, GLsizei count, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBS4UBVNVPROC) (GLuint index, GLsizei count, const GLubyte *v);&#10;# 10095 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLVERTEXATTRIBI1IEXTPROC) (GLuint index, GLint x);&#10;typedef void ( * PFNGLVERTEXATTRIBI2IEXTPROC) (GLuint index, GLint x, GLint y);&#10;typedef void ( * PFNGLVERTEXATTRIBI3IEXTPROC) (GLuint index, GLint x, GLint y, GLint z);&#10;typedef void ( * PFNGLVERTEXATTRIBI4IEXTPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w);&#10;typedef void ( * PFNGLVERTEXATTRIBI1UIEXTPROC) (GLuint index, GLuint x);&#10;typedef void ( * PFNGLVERTEXATTRIBI2UIEXTPROC) (GLuint index, GLuint x, GLuint y);&#10;typedef void ( * PFNGLVERTEXATTRIBI3UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UIEXTPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);&#10;typedef void ( * PFNGLVERTEXATTRIBI1IVEXTPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI2IVEXTPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI3IVEXTPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4IVEXTPROC) (GLuint index, const GLint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI1UIVEXTPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI2UIVEXTPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI3UIVEXTPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UIVEXTPROC) (GLuint index, const GLuint *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4BVEXTPROC) (GLuint index, const GLbyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4SVEXTPROC) (GLuint index, const GLshort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4UBVEXTPROC) (GLuint index, const GLubyte *v);&#10;typedef void ( * PFNGLVERTEXATTRIBI4USVEXTPROC) (GLuint index, const GLushort *v);&#10;typedef void ( * PFNGLVERTEXATTRIBIPOINTEREXTPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIIVEXTPROC) (GLuint index, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVERTEXATTRIBIUIVEXTPROC) (GLuint index, GLenum pname, GLuint *params);&#10;# 10176 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLBEGINVIDEOCAPTURENVPROC) (GLuint video_capture_slot);&#10;typedef void ( * PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLintptrARB offset);&#10;typedef void ( * PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC) (GLuint video_capture_slot, GLuint stream, GLenum frame_region, GLenum target, GLuint texture);&#10;typedef void ( * PFNGLENDVIDEOCAPTURENVPROC) (GLuint video_capture_slot);&#10;typedef void ( * PFNGLGETVIDEOCAPTUREIVNVPROC) (GLuint video_capture_slot, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVIDEOCAPTURESTREAMIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETVIDEOCAPTURESTREAMFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETVIDEOCAPTURESTREAMDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, GLdouble *params);&#10;typedef GLenum ( * PFNGLVIDEOCAPTURENVPROC) (GLuint video_capture_slot, GLuint *sequence_num, GLuint64EXT *capture_time);&#10;typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC) (GLuint video_capture_slot, GLuint stream, GLenum pname, const GLdouble *params);&#10;# 10248 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLHINTPGIPROC) (GLenum target, GLint mode);&#10;# 10306 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDETAILTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);&#10;typedef void ( * PFNGLGETDETAILTEXFUNCSGISPROC) (GLenum target, GLfloat *points);&#10;# 10319 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFOGFUNCSGISPROC) (GLsizei n, const GLfloat *points);&#10;typedef void ( * PFNGLGETFOGFUNCSGISPROC) (GLfloat *points);&#10;# 10351 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSAMPLEMASKSGISPROC) (GLclampf value, GLboolean invert);&#10;typedef void ( * PFNGLSAMPLEPATTERNSGISPROC) (GLenum pattern);&#10;# 10365 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPIXELTEXGENPARAMETERISGISPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLPIXELTEXGENPARAMETERFSGISPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC) (GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC) (GLenum pname, GLfloat *params);&#10;# 10399 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPOINTPARAMETERFSGISPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLPOINTPARAMETERFVSGISPROC) (GLenum pname, const GLfloat *params);&#10;# 10413 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSHARPENTEXFUNCSGISPROC) (GLenum target, GLsizei n, const GLfloat *points);&#10;typedef void ( * PFNGLGETSHARPENTEXFUNCSGISPROC) (GLenum target, GLfloat *points);&#10;# 10433 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXIMAGE4DSGISPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLint border, GLenum format, GLenum type, const void *pixels);&#10;typedef void ( * PFNGLTEXSUBIMAGE4DSGISPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint woffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei size4d, GLenum format, GLenum type, const void *pixels);&#10;# 10449 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTEXTURECOLORMASKSGISPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);&#10;# 10464 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLfloat *weights);&#10;typedef void ( * PFNGLTEXFILTERFUNCSGISPROC) (GLenum target, GLenum filter, GLsizei n, const GLfloat *weights);&#10;# 10509 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLASYNCMARKERSGIXPROC) (GLuint marker);&#10;typedef GLint ( * PFNGLFINISHASYNCSGIXPROC) (GLuint *markerp);&#10;typedef GLint ( * PFNGLPOLLASYNCSGIXPROC) (GLuint *markerp);&#10;typedef GLuint ( * PFNGLGENASYNCMARKERSSGIXPROC) (GLsizei range);&#10;typedef void ( * PFNGLDELETEASYNCMARKERSSGIXPROC) (GLuint marker, GLsizei range);&#10;typedef GLboolean ( * PFNGLISASYNCMARKERSGIXPROC) (GLuint marker);&#10;# 10586 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFLUSHRASTERSGIXPROC) (void);&#10;# 10620 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFRAGMENTCOLORMATERIALSGIXPROC) (GLenum face, GLenum mode);&#10;typedef void ( * PFNGLFRAGMENTLIGHTFSGIXPROC) (GLenum light, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLFRAGMENTLIGHTISGIXPROC) (GLenum light, GLenum pname, GLint param);&#10;typedef void ( * PFNGLFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLFRAGMENTLIGHTMODELFSGIXPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLFRAGMENTLIGHTMODELFVSGIXPROC) (GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLFRAGMENTLIGHTMODELISGIXPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLFRAGMENTLIGHTMODELIVSGIXPROC) (GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLFRAGMENTMATERIALFSGIXPROC) (GLenum face, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLFRAGMENTMATERIALISGIXPROC) (GLenum face, GLenum pname, GLint param);&#10;typedef void ( * PFNGLFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLGETFRAGMENTLIGHTFVSGIXPROC) (GLenum light, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETFRAGMENTLIGHTIVSGIXPROC) (GLenum light, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLGETFRAGMENTMATERIALFVSGIXPROC) (GLenum face, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETFRAGMENTMATERIALIVSGIXPROC) (GLenum face, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLLIGHTENVISGIXPROC) (GLenum pname, GLint param);&#10;# 10665 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFRAMEZOOMSGIXPROC) (GLint factor);&#10;&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void ( * PFNGLIGLOOINTERFACESGIXPROC) (GLenum pname, const void *params);&#10;# 10683 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef GLint ( * PFNGLGETINSTRUMENTSSGIXPROC) (void);&#10;typedef void ( * PFNGLINSTRUMENTSBUFFERSGIXPROC) (GLsizei size, GLint *buffer);&#10;typedef GLint ( * PFNGLPOLLINSTRUMENTSSGIXPROC) (GLint *marker_p);&#10;typedef void ( * PFNGLREADINSTRUMENTSSGIXPROC) (GLint marker);&#10;typedef void ( * PFNGLSTARTINSTRUMENTSSGIXPROC) (void);&#10;typedef void ( * PFNGLSTOPINSTRUMENTSSGIXPROC) (GLint marker);&#10;# 10712 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGETLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, GLint *params);&#10;typedef void ( * PFNGLLISTPARAMETERFSGIXPROC) (GLuint list, GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLLISTPARAMETERFVSGIXPROC) (GLuint list, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLLISTPARAMETERISGIXPROC) (GLuint list, GLenum pname, GLint param);&#10;typedef void ( * PFNGLLISTPARAMETERIVSGIXPROC) (GLuint list, GLenum pname, const GLint *params);&#10;# 10732 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLPIXELTEXGENSGIXPROC) (GLenum mode);&#10;# 10758 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDEFORMATIONMAP3DSGIXPROC) (GLenum target, GLdouble u1, GLdouble u2, GLint ustride, GLint uorder, GLdouble v1, GLdouble v2, GLint vstride, GLint vorder, GLdouble w1, GLdouble w2, GLint wstride, GLint worder, const GLdouble *points);&#10;typedef void ( * PFNGLDEFORMATIONMAP3FSGIXPROC) (GLenum target, GLfloat u1, GLfloat u2, GLint ustride, GLint uorder, GLfloat v1, GLfloat v2, GLint vstride, GLint vorder, GLfloat w1, GLfloat w2, GLint wstride, GLint worder, const GLfloat *points);&#10;typedef void ( * PFNGLDEFORMSGIXPROC) (GLbitfield mask);&#10;typedef void ( * PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC) (GLbitfield mask);&#10;# 10774 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLREFERENCEPLANESGIXPROC) (const GLdouble *equation);&#10;# 10816 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLSPRITEPARAMETERFSGIXPROC) (GLenum pname, GLfloat param);&#10;typedef void ( * PFNGLSPRITEPARAMETERFVSGIXPROC) (GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLSPRITEPARAMETERISGIXPROC) (GLenum pname, GLint param);&#10;typedef void ( * PFNGLSPRITEPARAMETERIVSGIXPROC) (GLenum pname, const GLint *params);&#10;# 10839 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLTAGSAMPLEBUFFERSGIXPROC) (void);&#10;# 10932 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLsizei width, GLenum format, GLenum type, const void *table);&#10;typedef void ( * PFNGLCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, const GLfloat *params);&#10;typedef void ( * PFNGLCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, const GLint *params);&#10;typedef void ( * PFNGLCOPYCOLORTABLESGIPROC) (GLenum target, GLenum internalformat, GLint x, GLint y, GLsizei width);&#10;typedef void ( * PFNGLGETCOLORTABLESGIPROC) (GLenum target, GLenum format, GLenum type, void *table);&#10;typedef void ( * PFNGLGETCOLORTABLEPARAMETERFVSGIPROC) (GLenum target, GLenum pname, GLfloat *params);&#10;typedef void ( * PFNGLGETCOLORTABLEPARAMETERIVSGIPROC) (GLenum target, GLenum pname, GLint *params);&#10;# 10960 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLFINISHTEXTURESUNXPROC) (void);&#10;# 10975 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLGLOBALALPHAFACTORBSUNPROC) (GLbyte factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORSSUNPROC) (GLshort factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORISUNPROC) (GLint factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORFSUNPROC) (GLfloat factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORDSUNPROC) (GLdouble factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORUBSUNPROC) (GLubyte factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORUSSUNPROC) (GLushort factor);&#10;typedef void ( * PFNGLGLOBALALPHAFACTORUISUNPROC) (GLuint factor);&#10;# 10999 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLDRAWMESHARRAYSSUNPROC) (GLenum mode, GLint first, GLsizei count, GLsizei width);&#10;# 11029 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLREPLACEMENTCODEUISUNPROC) (GLuint code);&#10;typedef void ( * PFNGLREPLACEMENTCODEUSSUNPROC) (GLushort code);&#10;typedef void ( * PFNGLREPLACEMENTCODEUBSUNPROC) (GLubyte code);&#10;typedef void ( * PFNGLREPLACEMENTCODEUIVSUNPROC) (const GLuint *code);&#10;typedef void ( * PFNGLREPLACEMENTCODEUSVSUNPROC) (const GLushort *code);&#10;typedef void ( * PFNGLREPLACEMENTCODEUBVSUNPROC) (const GLubyte *code);&#10;typedef void ( * PFNGLREPLACEMENTCODEPOINTERSUNPROC) (GLenum type, GLsizei stride, const void **pointer);&#10;# 11049 &quot;/usr/include/GL/glext.h&quot; 3 4&#10;typedef void ( * PFNGLCOLOR4UBVERTEX2FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y);&#10;typedef void ( * PFNGLCOLOR4UBVERTEX2FVSUNPROC) (const GLubyte *c, const GLfloat *v);&#10;typedef void ( * PFNGLCOLOR4UBVERTEX3FSUNPROC) (GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLCOLOR4UBVERTEX3FVSUNPROC) (const GLubyte *c, const GLfloat *v);&#10;typedef void ( * PFNGLCOLOR3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *v);&#10;typedef void ( * PFNGLNORMAL3FVERTEX3FSUNPROC) (GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *c, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD2FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLTEXCOORD2FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD4FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLTEXCOORD4FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC) (const GLfloat *tc, const GLubyte *c, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC) (GLfloat s, GLfloat t, GLfloat p, GLfloat q, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z, GLfloat w);&#10;typedef void ( * PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC) (const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC) (GLuint rc, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC) (GLuint rc, GLubyte r, GLubyte g, GLubyte b, GLubyte a, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC) (const GLuint *rc, const GLubyte *c, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *c, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *n, const GLfloat *v);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC) (GLuint rc, GLfloat s, GLfloat t, GLfloat r, GLfloat g, GLfloat b, GLfloat a, GLfloat nx, GLfloat ny, GLfloat nz, GLfloat x, GLfloat y, GLfloat z);&#10;typedef void ( * PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC) (const GLuint *rc, const GLfloat *tc, const GLfloat *c, const GLfloat *n, const GLfloat *v);&#10;# 2056 &quot;/usr/include/GL/gl.h&quot; 2&#10;# 2082 &quot;/usr/include/GL/gl.h&quot;&#10;__attribute__((visibility(&quot;default&quot;))) void glBlendEquationSeparateATI( GLenum modeRGB, GLenum modeA );&#10;typedef void ( * PFNGLBLENDEQUATIONSEPARATEATIPROC) (GLenum modeRGB, GLenum modeA);&#10;&#10;&#10;&#10;&#10;&#10;&#10;typedef void* GLeglImageOES;&#10;# 2099 &quot;/usr/include/GL/gl.h&quot;&#10;typedef void ( * PFNGLEGLIMAGETARGETTEXTURE2DOESPROC) (GLenum target, GLeglImageOES image);&#10;typedef void ( * PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC) (GLenum target, GLeglImageOES image);">
	  

	 <!-- UnusedType -->
	 
	<externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void UnusedType;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void UnusedType;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void UnusedType;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
                  <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                    <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                      <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                        <TYPEDEF start="278" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </storageClassSpecifierTypedef>
                    </storageClassSpecifier>
                  </declarationSpecifiers0>
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="286" length="4" text="void">
                    <VOID start="286" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="UnusedType">
                        <IDENTIFIER start="291" length="6" text="UnusedType" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="297" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>	  

	 <!-- GLvoid -->
	 
	<externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void GLvoid;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void GLvoid;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="20" text="typedef void GLvoid;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="12" text="typedef void">
                  <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                    <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                      <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="278" length="7" text="typedef">
                        <TYPEDEF start="278" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </storageClassSpecifierTypedef>
                    </storageClassSpecifier>
                  </declarationSpecifiers0>
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="286" length="4" text="void">
                    <VOID start="286" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="291" length="6" text="GLvoid">
                        <IDENTIFIER start="291" length="6" text="GLvoid" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="297" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>	  
	 
	<!-- GLsizei -->
<externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="20" text="typedef int GLsizei;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="20" text="typedef int GLsizei;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="20" text="typedef int GLsizei;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="11" text="typedef int">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="11" text="typedef int">
                <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="11" text="typedef int">
                  <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="7" text="typedef">
                    <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="7" text="typedef">
                      <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="462" length="7" text="typedef">
                        <TYPEDEF start="462" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </storageClassSpecifierTypedef>
                    </storageClassSpecifier>
                  </declarationSpecifiers0>
                  <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="470" length="3" text="int">
                    <INT start="470" length="3" text="int" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier2>
                </declarationSpecifiers2>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="474" length="7" text="GLsizei">
                        <IDENTIFIER start="474" length="7" text="GLsizei" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="481" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>	

    <!-- GLint -->
<externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="18" text="typedef int GLint;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="18" text="typedef int GLint;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="18" text="typedef int GLint;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="11" text="typedef int">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="11" text="typedef int">
                <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="11" text="typedef int">
                  <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="7" text="typedef">
                    <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="7" text="typedef">
                      <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="350" length="7" text="typedef">
                        <TYPEDEF start="350" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </storageClassSpecifierTypedef>
                    </storageClassSpecifier>
                  </declarationSpecifiers0>
                  <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="358" length="3" text="int">
                    <INT start="358" length="3" text="int" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier2>
                </declarationSpecifiers2>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="362" length="5" text="GLint">
                        <IDENTIFIER start="362" length="5" text="GLint" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="367" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>    

	<!-- GLenum -->
	<externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="28" text="typedef unsigned int GLenum;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="28" text="typedef unsigned int GLenum;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="28" text="typedef unsigned int GLenum;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="20" text="typedef unsigned int">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="20" text="typedef unsigned int">
                <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="20" text="typedef unsigned int">
                  <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="16" text="typedef unsigned">
                    <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="7" text="typedef">
                      <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="7" text="typedef">
                        <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="183" length="7" text="typedef">
                          <TYPEDEF start="183" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </storageClassSpecifierTypedef>
                      </storageClassSpecifier>
                    </declarationSpecifiers0>
                    <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="191" length="8" text="unsigned">
                      <UNSIGNED start="191" length="8" text="unsigned" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </typeSpecifier2>
                  </declarationSpecifiers2>
                  <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="200" length="3" text="int">
                    <INT start="200" length="3" text="int" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier2>
                </declarationSpecifiers2>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="204" length="6" text="GLenum">
                        <IDENTIFIER start="204" length="6" text="GLenum" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="210" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>    
      
    <!-- GLboolean -->
      <externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="32" text="typedef unsigned char GLboolean;">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="32" text="typedef unsigned char GLboolean;">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="32" text="typedef unsigned char GLboolean;">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="21" text="typedef unsigned char">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="21" text="typedef unsigned char">
                <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="21" text="typedef unsigned char">
                  <declarationSpecifiers2 isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="16" text="typedef unsigned">
                    <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="7" text="typedef">
                      <storageClassSpecifier isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="7" text="typedef">
                        <storageClassSpecifierTypedef isLexeme="false" file="/usr/include/GL/gl.h" start="212" length="7" text="typedef">
                          <TYPEDEF start="212" length="7" text="typedef" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </storageClassSpecifierTypedef>
                      </storageClassSpecifier>
                    </declarationSpecifiers0>
                    <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="220" length="8" text="unsigned">
                      <UNSIGNED start="220" length="8" text="unsigned" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </typeSpecifier2>
                  </declarationSpecifiers2>
                  <typeSpecifier2 isLexeme="false" file="/usr/include/GL/gl.h" start="229" length="4" text="char">
                    <CHAR start="229" length="4" text="char" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier2>
                </declarationSpecifiers2>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
                      <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="234" length="9" text="GLboolean">
                        <IDENTIFIER start="234" length="9" text="GLboolean" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      </directDeclaratorIdentifier>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="243" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>


	<!-- glTexImage2D -->
	  
      <externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="309" text="void glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="309" text="void glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="309" text="void glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels );">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="4" text="void">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="4" text="void">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="4" text="void">
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28725" length="4" text="void">
                    <VOID start="28725" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="303" text="glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="303" text="glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="303" text="glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="303" text="glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="303" text="glTexImage2D( GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels )">
                      <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="12" text="glTexImage2D">
                        <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28730" length="12" text="glTexImage2D">
                          <IDENTIFIER start="28730" length="12" text="glTexImage2D" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </directDeclaratorIdentifier>
                      </directDeclarator>
                      <LPAREN_SCOPE start="28742" length="1" text="(" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      <parameterTypeList isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="287" text="GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels">
                        <parameterList isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="287" text="GLenum target, GLint level,&#10;                                    GLint internalFormat,&#10;                                    GLsizei width, GLsizei height,&#10;                                    GLint border, GLenum format, GLenum type,&#10;                                    const GLvoid *pixels">
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="13" text="GLenum target">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="13" text="GLenum target">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="6" text="GLenum">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="6" text="GLenum">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="6" text="GLenum">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28744" length="6" text="GLenum">
                                      <TYPEDEF_NAME start="28744" length="6" text="GLenum" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28751" length="6" text="target">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28751" length="6" text="target">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28751" length="6" text="target">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28751" length="6" text="target">
                                      <IDENTIFIER start="28751" length="6" text="target" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="11" text="GLint level">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="11" text="GLint level">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="5" text="GLint">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="5" text="GLint">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="5" text="GLint">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28759" length="5" text="GLint">
                                      <TYPEDEF_NAME start="28759" length="5" text="GLint" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28765" length="5" text="level">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28765" length="5" text="level">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28765" length="5" text="level">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28765" length="5" text="level">
                                      <IDENTIFIER start="28765" length="5" text="level" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="20" text="GLint internalFormat">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="20" text="GLint internalFormat">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="5" text="GLint">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="5" text="GLint">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="5" text="GLint">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28808" length="5" text="GLint">
                                      <TYPEDEF_NAME start="28808" length="5" text="GLint" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28814" length="14" text="internalFormat">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28814" length="14" text="internalFormat">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28814" length="14" text="internalFormat">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28814" length="14" text="internalFormat">
                                      <IDENTIFIER start="28814" length="14" text="internalFormat" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="13" text="GLsizei width">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="13" text="GLsizei width">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="7" text="GLsizei">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="7" text="GLsizei">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="7" text="GLsizei">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28866" length="7" text="GLsizei">
                                      <TYPEDEF_NAME start="28866" length="7" text="GLsizei" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28874" length="5" text="width">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28874" length="5" text="width">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28874" length="5" text="width">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28874" length="5" text="width">
                                      <IDENTIFIER start="28874" length="5" text="width" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="14" text="GLsizei height">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="14" text="GLsizei height">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="7" text="GLsizei">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="7" text="GLsizei">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="7" text="GLsizei">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28881" length="7" text="GLsizei">
                                      <TYPEDEF_NAME start="28881" length="7" text="GLsizei" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28889" length="6" text="height">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28889" length="6" text="height">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28889" length="6" text="height">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28889" length="6" text="height">
                                      <IDENTIFIER start="28889" length="6" text="height" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="12" text="GLint border">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="12" text="GLint border">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="5" text="GLint">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="5" text="GLint">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="5" text="GLint">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28933" length="5" text="GLint">
                                      <TYPEDEF_NAME start="28933" length="5" text="GLint" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28939" length="6" text="border">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28939" length="6" text="border">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28939" length="6" text="border">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28939" length="6" text="border">
                                      <IDENTIFIER start="28939" length="6" text="border" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="13" text="GLenum format">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="13" text="GLenum format">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="6" text="GLenum">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="6" text="GLenum">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="6" text="GLenum">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28947" length="6" text="GLenum">
                                      <TYPEDEF_NAME start="28947" length="6" text="GLenum" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28954" length="6" text="format">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28954" length="6" text="format">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28954" length="6" text="format">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28954" length="6" text="format">
                                      <IDENTIFIER start="28954" length="6" text="format" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="11" text="GLenum type">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="11" text="GLenum type">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="6" text="GLenum">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="6" text="GLenum">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="6" text="GLenum">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="28962" length="6" text="GLenum">
                                      <TYPEDEF_NAME start="28962" length="6" text="GLenum" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28969" length="4" text="type">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="28969" length="4" text="type">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="28969" length="4" text="type">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="28969" length="4" text="type">
                                      <IDENTIFIER start="28969" length="4" text="type" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="20" text="const GLvoid *pixels">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="20" text="const GLvoid *pixels">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="12" text="const GLvoid">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="12" text="const GLvoid">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="12" text="const GLvoid">
                                    <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="5" text="const">
                                      <typeQualifier isLexeme="false" file="/usr/include/GL/gl.h" start="29011" length="5" text="const">
                                        <CONST start="29011" length="5" text="const" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                      </typeQualifier>
                                    </declarationSpecifiers0>
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="29017" length="6" text="GLvoid">
                                      <TYPEDEF_NAME start="29017" length="6" text="GLvoid" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="29024" length="7" text="*pixels">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="29024" length="7" text="*pixels">
                                  <pointer isLexeme="false" file="/usr/include/GL/gl.h" start="29024" length="1" text="*">
                                    <msvsAttributeAny isLexeme="false" file=""/>
                                    <STAR start="29024" length="1" text="*" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                  </pointer>
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="29025" length="6" text="pixels">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="29025" length="6" text="pixels">
                                      <IDENTIFIER start="29025" length="6" text="pixels" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                        </parameterList>
                      </parameterTypeList>
                      <RPAREN_SCOPE start="29032" length="1" text=")" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="29033" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>
      
      <!-- glPopAttrib -->
      <externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void glPopAttrib( void );">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void glPopAttrib( void );">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void glPopAttrib( void );">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                    <VOID start="3542" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="glPopAttrib( void )">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="glPopAttrib( void )">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="glPopAttrib( void )">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="glPopAttrib( void )">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="glPopAttrib( void )">
                      <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="11" text="glPopAttrib">
                        <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="11" text="glPopAttrib">
                          <IDENTIFIER start="3547" length="11" text="glPopAttrib" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </directDeclaratorIdentifier>
                      </directDeclarator>
                      <LPAREN_SCOPE start="3558" length="1" text="(" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      <parameterTypeList isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                        <parameterList isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                            <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                              <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                                <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                                  <VOID start="3560" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                </typeSpecifier1>
                              </declarationSpecifiers1>
                            </declarationSpecifiers>
                          </parameterDeclaration>
                        </parameterList>
                      </parameterTypeList>
                      <RPAREN_SCOPE start="3565" length="1" text=")" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="3566" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>
      
      <!-- SomeFunction -->
      <externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void SomeFunction( void );">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void SomeFunction( void );">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="25" text="void SomeFunction( void );">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3542" length="4" text="void">
                    <VOID start="3542" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="SomeFunction( void )">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="SomeFunction( void )">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="SomeFunction( void )">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="SomeFunction( void )">
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="19" text="SomeFunction( void )">
                      <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="11" text="SomeFunction">
                        <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="3547" length="11" text="SomeFunction">
                          <IDENTIFIER start="3547" length="11" text="SomeFunction" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </directDeclaratorIdentifier>
                      </directDeclarator>
                      <LPAREN_SCOPE start="3558" length="1" text="(" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      <parameterTypeList isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                        <parameterList isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                            <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                              <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                                <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3560" length="4" text="void">
                                  <VOID start="3560" length="4" text="void" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                </typeSpecifier1>
                              </declarationSpecifiers1>
                            </declarationSpecifiers>
                          </parameterDeclaration>
                        </parameterList>
                      </parameterTypeList>
                      <RPAREN_SCOPE start="3565" length="1" text=")" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="3566" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>

      <!-- glGetString -->
      <externalDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="43" text="const GLubyte * glGetString( GLenum name );">
        <declaration isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="43" text="const GLubyte * glGetString( GLenum name );">
          <declarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="43" text="const GLubyte * glGetString( GLenum name );">
            <declarationCheckdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="13" text="const GLubyte">
              <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="13" text="const GLubyte">
                <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="13" text="const GLubyte">
                  <declarationSpecifiers0 isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="5" text="const">
                    <typeQualifier isLexeme="false" file="/usr/include/GL/gl.h" start="3908" length="5" text="const">
                      <CONST start="3908" length="5" text="const" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </typeQualifier>
                  </declarationSpecifiers0>
                  <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3914" length="7" text="GLubyte">
                    <TYPEDEF_NAME start="3914" length="7" text="GLubyte" isLexeme="true" file="/usr/include/GL/gl.h"/>
                  </typeSpecifier1>
                </declarationSpecifiers1>
              </declarationSpecifiers>
            </declarationCheckdeclarationSpecifiers>
            <declarationCheckinitDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3922" length="28" text="* glGetString( GLenum name )">
              <initDeclaratorList isLexeme="false" file="/usr/include/GL/gl.h" start="3922" length="28" text="* glGetString( GLenum name )">
                <initDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3922" length="28" text="* glGetString( GLenum name )">
                  <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="3922" length="28" text="* glGetString( GLenum name )">
                    <pointer isLexeme="false" file="/usr/include/GL/gl.h" start="3922" length="1" text="*">
                      <msvsAttributeAny isLexeme="false" file=""/>
                      <STAR start="3922" length="1" text="*" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </pointer>
                    <msvsAttributeAny isLexeme="false" file=""/>
                    <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3924" length="26" text="glGetString( GLenum name )">
                      <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3924" length="11" text="glGetString">
                        <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="3924" length="11" text="glGetString">
                          <IDENTIFIER start="3924" length="11" text="glGetString" isLexeme="true" file="/usr/include/GL/gl.h"/>
                        </directDeclaratorIdentifier>
                      </directDeclarator>
                      <LPAREN_SCOPE start="3935" length="1" text="(" isLexeme="true" file="/usr/include/GL/gl.h"/>
                      <parameterTypeList isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="11" text="GLenum name">
                        <parameterList isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="11" text="GLenum name">
                          <parameterDeclaration isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="11" text="GLenum name">
                            <parameterDeclarationCheck isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="11" text="GLenum name">
                              <parameterDeclarationdeclarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="6" text="GLenum">
                                <declarationSpecifiers isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="6" text="GLenum">
                                  <declarationSpecifiers1 isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="6" text="GLenum">
                                    <typeSpecifier1 isLexeme="false" file="/usr/include/GL/gl.h" start="3937" length="6" text="GLenum">
                                      <TYPEDEF_NAME start="3937" length="6" text="GLenum" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </typeSpecifier1>
                                  </declarationSpecifiers1>
                                </declarationSpecifiers>
                              </parameterDeclarationdeclarationSpecifiers>
                              <parameterDeclarationCheckDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3944" length="4" text="name">
                                <declarator isLexeme="false" file="/usr/include/GL/gl.h" start="3944" length="4" text="name">
                                  <msvsAttributeAny isLexeme="false" file=""/>
                                  <directDeclarator isLexeme="false" file="/usr/include/GL/gl.h" start="3944" length="4" text="name">
                                    <directDeclaratorIdentifier isLexeme="false" file="/usr/include/GL/gl.h" start="3944" length="4" text="name">
                                      <IDENTIFIER start="3944" length="4" text="name" isLexeme="true" file="/usr/include/GL/gl.h"/>
                                    </directDeclaratorIdentifier>
                                  </directDeclarator>
                                </declarator>
                              </parameterDeclarationCheckDeclarator>
                            </parameterDeclarationCheck>
                          </parameterDeclaration>
                        </parameterList>
                      </parameterTypeList>
                      <RPAREN_SCOPE start="3949" length="1" text=")" isLexeme="true" file="/usr/include/GL/gl.h"/>
                    </directDeclarator>
                  </declarator>
                </initDeclarator>
              </initDeclaratorList>
            </declarationCheckinitDeclaratorList>
            <SEMICOLON start="3950" length="1" text=";" isLexeme="true" file="/usr/include/GL/gl.h"/>
          </declarationCheck>
        </declaration>
      </externalDeclaration>
    </translationUnit>
  </ast>
</cscan>
